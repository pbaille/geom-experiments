<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1478698765690">{:repl-history {:ide [], :local [&quot;(let [r (dom/query nil \&quot;rect\&quot;)]\n    (println r)\n    (aget r \&quot;style\&quot;))&quot; &quot;(let [r (dom/query nil \&quot;rect\&quot;)]\n    (println r)\n    (.. r -style -stroke))&quot; &quot;(let [r (dom/query nil \&quot;rect\&quot;)]\n    (println r)\n    (.. r -style))&quot; &quot;(let [r (dom/query nil \&quot;rect\&quot;)]\n    (println r)\n    (.. r -fill))&quot; &quot;(let [r (dom/query nil \&quot;rect\&quot;)]\n    (println r)\n    (.. r -style -fill))&quot; &quot;(let [r (dom/query nil \&quot;rect\&quot;)]\n    (println r)\n    (js-&gt;clj (.. r -style)))&quot; &quot;(let [w 40\n        h 40\n        pixel-size 5\n        gs (atom (grayscott w h false))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))\n\n        _ (svg \&quot;#app\&quot;\n               {:width (* w pixel-size) :height (* h pixel-size)}\n               (map-indexed (fn [i v]\n                              (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size {:style \&quot;fill: black\&quot;}))\n                            (:u @gs)))\n\n        rects (array-seq (dom/query-all nil \&quot;rect\&quot;))]\n\n    (animate\n      (fn [_]\n        #_(println \&quot;yop\&quot;)\n        (swap! gs step)\n        (let [u (:u @gs)]\n          (doseq [[v x] (map vector u rects)]\n            (aset x \&quot;fill-opacity\&quot; v)))\n        false)))&quot; &quot;(let [r (dom/query nil \&quot;rect\&quot;)]\n    (js-&gt;clj (.. r -style)))&quot; &quot;(let [r (dom/query nil \&quot;rect\&quot;)]\n    (.. r -style -fill))&quot; &quot;(let [w 40\n        h 40\n        pixel-size 5\n        gs (atom (grayscott w h false))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))\n\n        _ (svg \&quot;#app\&quot;\n               {:width (* w pixel-size) :height (* h pixel-size)}\n               (map-indexed (fn [i v]\n                              (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size\n                                        {:style \&quot;fill: black; fill-opacity: 1\&quot;}))\n                            (:u @gs)))\n\n        rects (array-seq (dom/query-all nil \&quot;rect\&quot;))]\n\n    (animate\n      (fn [_]\n        #_(println \&quot;yop\&quot;)\n        (swap! gs step)\n        (let [u (:u @gs)]\n          (doseq [[v x] (map vector u rects)]\n            (aset x \&quot;fill-opacity\&quot; v)))\n        false)))&quot; &quot;(let [w 40\n        h 40\n        pixel-size 5\n        gs (atom (grayscott w h false))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))\n\n        _ (svg \&quot;#app\&quot;\n               {:width (* w pixel-size) :height (* h pixel-size)}\n               (map-indexed (fn [i v]\n                              (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size\n                                        {:style \&quot;fill: black; fill-opacity: 1\&quot;}))\n                            (:u @gs)))\n\n        rects (array-seq (dom/query-all nil \&quot;rect\&quot;))]\n\n    (animate\n      (fn [_]\n        #_(println \&quot;yop\&quot;)\n        (swap! gs step)\n        (let [u (:u @gs)]\n          (doseq [[v x] (map vector u rects)]\n            (aset x \&quot;fill-opacity\&quot; v)))\n        true)))&quot; &quot;(let [w 40\n        h 40\n        pixel-size 5\n        gs (atom (grayscott w h false))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))\n\n        _ (svg \&quot;#app\&quot;\n               {:width (* w pixel-size) :height (* h pixel-size)}\n               (map-indexed (fn [i v]\n                              (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size\n                                        {:style \&quot;fill: black; fill-opacity: 1\&quot;}))\n                            (:u @gs)))\n\n        rects (array-seq (dom/query-all nil \&quot;rect\&quot;))]\n\n    (animate\n      (fn [_]\n        #_(println \&quot;yop\&quot;)\n        (swap! gs step)\n        (let [u (:u @gs)]\n          (doseq [[v x] (map vector u rects)]\n            (aset (.-style x) \&quot;fill-opacity\&quot; v)))\n        true)))&quot; &quot;(let [w 100\n        h 100\n        pixel-size 2\n        gs (atom (grayscott w h false))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))\n\n        _ (svg \&quot;#app\&quot;\n               {:width (* w pixel-size) :height (* h pixel-size)}\n               (map-indexed (fn [i v]\n                              (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size\n                                        {:style \&quot;fill: black; fill-opacity: 1\&quot;}))\n                            (:u @gs)))\n\n        rects (array-seq (dom/query-all nil \&quot;rect\&quot;))]\n\n    (animate\n      (fn [_]\n        #_(println \&quot;yop\&quot;)\n        (swap! gs step)\n        (let [u (:u @gs)]\n          (doseq [[v x] (map vector u rects)]\n            (aset (.-style x) \&quot;fill-opacity\&quot; v)))\n        true)))&quot; &quot;(let [w 100\n        h 100\n        pixel-size 1\n        gs (atom (grayscott w h false))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))\n\n        _ (svg \&quot;#app\&quot;\n               {:width (* w pixel-size) :height (* h pixel-size)}\n               (map-indexed (fn [i v]\n                              (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size\n                                        {:style \&quot;fill: black; fill-opacity: 1\&quot;}))\n                            (:u @gs)))\n\n        rects (array-seq (dom/query-all nil \&quot;rect\&quot;))]\n\n    (animate\n      (fn [_]\n        (swap! gs step)\n        (let [u (:u @gs)]\n          (doseq [[v x] (map vector u rects)]\n            (aset (.-style x) \&quot;fill-opacity\&quot; v)))\n        true)))&quot; &quot;(let [w 100\n        h 100\n        pixel-size 1\n        gs (atom (grayscott w h false))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))\n\n        _ (svg \&quot;#app\&quot;\n               {:width (* w pixel-size) :height (* h pixel-size)}\n               (map-indexed (fn [i v]\n                              (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size\n                                        {:style \&quot;fill: black; fill-opacity: 1\&quot;}))\n                            (:u @gs)))\n\n        rects (array-seq (dom/query-all nil \&quot;rect\&quot;))]\n\n    (animate\n      (fn [_]\n        (println \&quot;yop\&quot;)\n        (swap! gs step)\n        #_(let [u (:u @gs)]\n          (doseq [[v x] (map vector u rects)]\n            (aset (.-style x) \&quot;fill-opacity\&quot; v)))\n        true)))&quot; &quot;(let [w 100\n        h 100\n        pixel-size 1\n        gs (atom (grayscott w h false))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))\n\n        _ (svg \&quot;#app\&quot;\n               {:width (* w pixel-size) :height (* h pixel-size)}\n               (map-indexed (fn [i v]\n                              (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size\n                                        {:style \&quot;fill: black; fill-opacity: 1\&quot;}))\n                            (:u @gs)))\n\n        rects (array-seq (dom/query-all nil \&quot;rect\&quot;))]\n\n    (animate\n      (fn [_]\n        (println \&quot;yop\&quot;)\n        (step @gs)\n        #_(let [u (:u @gs)]\n          (doseq [[v x] (map vector u rects)]\n            (aset (.-style x) \&quot;fill-opacity\&quot; v)))\n        true)))&quot; &quot;(let [w 100\n        h 100\n        pixel-size 1\n        gs (atom (grayscott w h false))\n        gs1 (grayscott w h false)\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))\n\n        _ (svg \&quot;#app\&quot;\n               {:width (* w pixel-size) :height (* h pixel-size)}\n               (map-indexed (fn [i v]\n                              (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size\n                                        {:style \&quot;fill: black; fill-opacity: 1\&quot;}))\n                            (:u @gs)))\n\n        rects (array-seq (dom/query-all nil \&quot;rect\&quot;))]\n\n    (animate\n      (fn [_]\n        (println \&quot;yop\&quot;)\n        (step gs1)\n        #_(let [u (:u @gs)]\n          (doseq [[v x] (map vector u rects)]\n            (aset (.-style x) \&quot;fill-opacity\&quot; v)))\n        true)))&quot; &quot;(let [a (array 1 2 3)]\n  (aset a 2 1)\n  a)&quot; &quot;(time (dotimes [x (range 100000)] (let [a (array 1 2 3)]\n  (aset a 2 1)\n  a)))&quot; &quot;(time \n  (dotimes [x (range 100000)] \n    (let [a (vector 1 2 3)]\n      (assoc a 2 1)\n      a)))&quot; &quot;(time \n  (dotimes [x (range 100000)] \n    (let [a (vector 1 2 3)]\n      (assoc a 2 1))))&quot; &quot;(time \n  (dotimes [x (range 100000)] \n    (let [a (array 1 2 3)]\n    (aset a 2 1)\n    a)))&quot; &quot;(let [gs (atom (grayscott 400 400 nil))]\n    (time\n      (dotimes [x (range 100000)]\n        (swap! gs upd 1))))&quot; &quot;(time (take 100000 (iterate #(upd % 1) (grayscott 400 400 nil))))&quot; &quot;(time (take 1000 (iterate #(upd % 1) (grayscott 400 400 nil))))&quot; &quot;(time \n    (reduce (fn [a f] (f a))\n          (grayscott 400 400 nil)\n          (repeat 10000 #(upd % 1))))&quot; &quot;(time\n    (reduce (fn [a f] (f a))\n          (grayscott 400 400 nil)\n          (repeat 10000 #(upd % 1))))&quot; &quot;(let [gs (atom (grayscott 400 400 nil))]\n    (time\n      (dotimes [x (range 1000)]\n        (swap! gs upd 1))))&quot; &quot;(let [gs (atom (grayscott 400 400 nil))]\n    (time\n      (dotimes [x (range 10)]\n        (swap! gs upd 1))))&quot; &quot;(+ 1 2)&quot; &quot;(let [gs (atom (grayscott 400 400 nil))]\n    (swap! gs upd 1)\n    nil)&quot; &quot;(time (let [gs (atom (grayscott 400 400 nil))]\n    (swap! gs upd 1)\n    nil))&quot; &quot;(time (let [gs (atom (grayscott 40 40 nil))]\n    (swap! gs upd 1)\n    nil))&quot; &quot;(time (let [gs (atom (grayscott 40 40 nil))]\n          (swap! gs upd 1)\n          nil))&quot; &quot;(let [gs (atom (grayscott 40 40 nil))]\n    (time (dotimes [x (range 1000)]\n             (swap! gs upd 1))))&quot; &quot;(let [gs (atom (grayscott 40 40 nil))]\n    (time (dotimes [x (range 1000)] \n            (upd gs 1))))&quot; &quot;(let [gs (atom (grayscott 40 40 nil))]\n    (time (dotimes [x (range 1000)] \n            (println (upd gs 1)))))&quot; &quot;(let [gs (atom (grayscott 40 40 nil))]\n    (time (doseq [x (range 1000)]\n            (upd gs 1))))&quot; &quot;(let [gs (atom (grayscott 40 40 nil))]\n    (time (doseq [x (range 1000)]\n            (upd @gs 1))))&quot; &quot;(let [gs (atom (grayscott 40 40 nil))]\n    (time (doseq [x (range 10)]\n            (upd @gs 1))))&quot; &quot;(let [gs (atom (grayscott 40 40 nil))]\n    (time (doseq [x (range 100)]\n            (upd @gs 1))))&quot; &quot;(let [gs (grayscott 400 400 nil)]\n    (time (dotimes [x (range 100)]\n            (upd gs 1))))&quot; &quot;(let [gs (grayscott 400 400 nil)]\n    (time (dotimes [x (range 100)]\n            x\n            (upd gs 1))))&quot; &quot;(let [gs (grayscott 400 400 nil)]\n    (time (doseq [x (range 100)]\n            x\n            (upd gs 1))))&quot; &quot;(let [gs (grayscott 400 400 nil)]\n    (time (doseq [x (range 10)]\n            x\n            (upd gs 1))))&quot; &quot;(grayscott 400 400 nil)&quot; &quot;(time (upd (grayscott 400 400 nil) 1))&quot; &quot;(time (do (upd (grayscott 400 400 nil) 1) nil))&quot; &quot;(time (do (upd (grayscott 200 200 nil) 1)\n            (upd (grayscott 200 200 nil) 1)nil))&quot; &quot;(defn upd2 [{:keys [w h u v du dv f k is-tilling] :as gs} t]\n  (let [t (clip 0 1 t)\n        w1 (dec w)\n        h1 (dec h)]\n\n    (reduce (fn [gs [x y]]\n              (let [idx (+ x (* y w))\n                    top (- idx w)\n                    bottom (+ idx w)\n                    left (dec idx)\n                    right (inc idx)\n                    f (get-f gs x y)\n                    k (get-k gs x y)\n                    cu (get u idx)\n                    cv (get v idx)\n                    d2 (* cu cv cv)]\n\n                (-&gt; gs\n                    (assoc-in [:u idx] (max 0 (+ cu\n                                                 (* t\n                                                    (+ (- (* du (- (+ (get u right) (get u left) (get u bottom) (get u top))\n                                                                   (* 4 cu)))\n                                                          d2)\n                                                       (* f (- 1.0 cu)))))))\n                    (assoc-in [:v idx] (max 0 (+ cv\n                                                 (* t\n                                                    (- (+ (* dv (- (+ (get v right) (get v left) (get v bottom) (get v top))\n                                                                   (* 4 cv)))\n                                                          d2)\n                                                       (* k cv)))))))))\n            gs\n            (for [x (range 1 w1)\n                  y (range 1 h1)]\n              [x y]))))&quot; &quot;(time (do (upd2 (grayscott 200 200 nil) 1)\n            (upd2 (grayscott 200 200 nil) 1)\n            nil))&quot; &quot;(defn upd [{:keys [w h u v du dv f k is-tilling] :as gs} t]\n  (let [t (clip 0 1 t)\n        w1 (dec w)\n        h1 (dec h)\n        [tu tv] (reduce (fn [[tu tv] [x y]]\n                          (let [idx (+ x (* y w))\n                                top (- idx w)\n                                bottom (+ idx w)\n                                left (dec idx)\n                                right (inc idx)\n                                ;f (get-f gs x y)\n                                ;k (get-k gs x y)\n                                cu (get u idx)\n                                cv (get v idx)\n                                d2 (* cu cv cv)]\n\n                            [(assoc! tu idx (max 0 (+ cu\n                                                      (* t\n                                                         (+ (- (* du (- (+ (get u right) (get u left) (get u bottom) (get u top))\n                                                                        (* 4 cu)))\n                                                               d2)\n                                                            (* f (- 1.0 cu)))))))\n\n\n                             (assoc! tv idx (max 0 (+ cv\n                                                      (* t\n                                                         (- (+ (* dv (- (+ (get v right) (get v left) (get v bottom) (get v top))\n                                                                        (* 4 cv)))\n                                                               d2)\n                                                            (* k cv))))))]))\n                        [(transient u) (transient v)]\n                        (for [x (range 1 w1)\n                              y (range 1 h1)]\n                          [x y]))]\n    (assoc gs :u (persistent! tu)\n              :v (persistent! tv))))&quot; &quot;(time (do (upd (grayscott 200 200 nil) 1)\n            (upd (grayscott 200 200 nil) 1)\n            nil))&quot; &quot;(defn upd3 [{:keys [w h u v du dv f k is-tilling] :as gs} t]\n  (let [t (clip 0 1 t)\n        w1 (dec w)\n        h1 (dec h)\n        gs (transient gs)]\n\n    (reduce (fn [gs [x y]]\n              (let [idx (+ x (* y w))\n                    top (- idx w)\n                    bottom (+ idx w)\n                    left (dec idx)\n                    right (inc idx)\n                    f (get-f gs x y)\n                    k (get-k gs x y)\n                    cu (get u idx)\n                    cv (get v idx)\n                    d2 (* cu cv cv)]\n\n                (-&gt; gs\n                    (assoc-in! [:u idx] (max 0 (+ cu\n                                                 (* t\n                                                    (+ (- (* du (- (+ (get u right) (get u left) (get u bottom) (get u top))\n                                                                   (* 4 cu)))\n                                                          d2)\n                                                       (* f (- 1.0 cu)))))))\n                    (assoc-in! [:v idx] (max 0 (+ cv\n                                                 (* t\n                                                    (- (+ (* dv (- (+ (get v right) (get v left) (get v bottom) (get v top))\n                                                                   (* 4 cv)))\n                                                          d2)\n                                                       (* k cv)))))))))\n            gs\n            (for [x (range 1 w1)\n                  y (range 1 h1)]\n              [x y]))))&quot; &quot;(defn upd [{:keys [w h u v du dv f k is-tilling] :as gs} t]\n  (let [t (clip 0 1 t)\n        w1 (dec w)\n        h1 (dec h)\n        [tu tv] (reduce (fn [[tu tv] [x y]]\n                          (let [idx (+ x (* y w))\n                                top (- idx w)\n                                bottom (+ idx w)\n                                left (dec idx)\n                                right (inc idx)\n                                f (get-f gs x y)\n                                k (get-k gs x y)\n                                cu (get u idx)\n                                cv (get v idx)\n                                d2 (* cu cv cv)]\n\n                            [(assoc! tu idx (max 0 (+ cu\n                                                      (* t\n                                                         (+ (- (* du (- (+ (get u right) (get u left) (get u bottom) (get u top))\n                                                                        (* 4 cu)))\n                                                               d2)\n                                                            (* f (- 1.0 cu)))))))\n\n\n                             (assoc! tv idx (max 0 (+ cv\n                                                      (* t\n                                                         (- (+ (* dv (- (+ (get v right) (get v left) (get v bottom) (get v top))\n                                                                        (* 4 cv)))\n                                                               d2)\n                                                            (* k cv))))))]))\n                        [(transient u) (transient v)]\n                        (for [x (range 1 w1)\n                              y (range 1 h1)]\n                          [x y]))]\n    (assoc gs :u (persistent! tu)\n              :v (persistent! tv))))&quot; &quot;(time (upd (grayscott 200 200 nil) 1))&quot; &quot;(time (do (upd (grayscott 200 200 nil) 1) nil))&quot; &quot;(defn upd3 [{:keys [w h u v du dv f k is-tilling] :as gs} t]\n  (let [t (clip 0 1 t)\n        tu (transient u)\n        tv (transient v)\n        w1 (dec w)\n        h1 (dec h)\n\n        temp (reduce (fn [[tu tv] [x y]]\n                       (let [idx (+ x (* y w))\n                             top (- idx w)\n                             bottom (+ idx w)\n                             left (dec idx)\n                             right (inc idx)\n                             f (get-f gs x y)\n                             k (get-k gs x y)\n                             cu (get u idx)\n                             cv (get v idx)\n                             d2 (* cu cv cv)]\n\n                         [(assoc! tu idx (max 0 (+ cu\n                                                   (* t\n                                                      (+ (- (* du (- (+ (get u right) (get u left) (get u bottom) (get u top))\n                                                                     (* 4 cu)))\n                                                            d2)\n                                                         (* f (- 1.0 cu)))))))\n\n\n                          (assoc! tv idx (max 0 (+ cv\n                                                   (* t\n                                                      (- (+ (* dv (- (+ (get v right) (get v left) (get v bottom) (get v top))\n                                                                     (* 4 cv)))\n                                                            d2)\n                                                         (* k cv))))))]))\n                     [(transient u) (transient v)]\n                     (for [x (range 1 w1)\n                           y (range 1 h1)]\n                       [x y]))\n        [tu tv] (if-not is-tilling\n                  temp\n                  (let [w2 (dec w1)\n                        idxH1 (* h1 w)\n                        idxH2 (* (dec h1) w)\n\n                        temp (reduce\n                               (fn [[tu tv] x]\n                                 (let [left (if (zero? x) w1 (dec x))\n                                       right (if (= w1 x) 0 (inc x))\n                                       idx (+ idxH1 x)\n                                       cu (get u x)\n                                       cv (get v x)\n                                       cui (get u idx)\n                                       cvi (get v idx)\n                                       d1 (* cu cv cv)\n                                       d2 (* cui cvi cvi)]\n\n                                   [(-&gt; tu\n                                        (assoc! x (max 0 (+ cu\n                                                            (* t (+ (- (* du (- (+ (get u right) (get u left) (get u (+ w x)) cui)\n                                                                                (* 4 cu)))\n                                                                       d1)\n                                                                    (* f (- 1.0 cu)))))))\n                                        (assoc! idx (max 0 (+ cui\n                                                              (* t (+ (- (* du (- (+ (get u (+ idxH1 right)) (get u (+ idxH1 left)) cu (get u (+ idxH2 x)))\n                                                                                  (* 4 cui)))\n                                                                         d2)\n                                                                      (* f (- 1.0 cui))))))))\n                                    (-&gt; tv\n                                        (assoc! x (max 0 (+ cv\n                                                            (* t (- (+ (* dv (- (+ (get v right) (get v left) (get v (+ w x)) cvi)\n                                                                                (* 4 cv)))\n                                                                       d1)\n                                                                    (* k cv))))))\n                                        (assoc! idx (max 0 (+ cvi\n                                                              (* t (- (+ (* dv (- (+ (get v (+ idxH1 right)) (get v (+ idxH1 left)) cv (get v (+ idxH2 x)))\n                                                                                  (* 4 cvi)))\n                                                                         d2)\n                                                                      (* k cvi)))))))]))\n                               temp\n                               (range 0 w))]\n                    (reduce\n                      (fn [[tu tv] y]\n                        (let [idx (* y w)\n                              idxW1 (+ idx w1)\n                              idxW2 (+ idx w2)\n                              cu (get u idx)\n                              cv (get v idx)\n                              cui (get u idxW1)\n                              cvi (get v idxW1)\n                              d1 (* cu cv cv)\n                              d2 (* cui cvi cvi)\n                              up (* w (if (zero? y) h1 (dec y)))\n                              down (* w (if (= h1 y) 0 (inc y)))]\n\n                          [(-&gt; tu\n                               (assoc! idx (max 0 (+ cu\n                                                     (* t (+ (- (* du (- (+ (get u (inc idx)) cui (get u down) (get u up))\n                                                                         (* 4 cu)))\n                                                                d1)\n                                                             (* f (- 1.0 cu)))))))\n\n                               (assoc! idxW1 (max 0 (+ cui\n                                                       (* t (+ (- (* du (- (+ cu (get u idxW2) (get u (+ w1 down)) cu (get u (+ up w1)))\n                                                                           (* 4 cui)))\n                                                                  d2)\n                                                               (* f (- 1.0 cui))))))))\n\n                           (-&gt; tv\n                               (assoc! idx (max 0 (+ cv\n                                                     (* t (- (+ (* dv (- (+ (get v (inc idx)) cvi (get v down) (get v up))\n                                                                         (* 4 cv)))\n                                                                d1)\n                                                             (* k cv))))))\n\n                               (assoc! idxW1 (max 0 (+ cvi\n                                                       (* t (- (+ (* dv (- (+ cv (get v idxW2) (get v (+ down w1)) (get v (+ up w1)))\n                                                                           (* 4 cvi)))\n                                                                  d2)\n                                                               (* k cvi)))))))]))\n                      temp\n                      (range 0 h))))]\n    (assoc gs :u (persistent! tu)\n              :v (persistent! tv))))&quot; &quot;(time (do (upd3 (grayscott 200 200 nil) 1) nil))&quot; &quot;(defn upd3 [{:keys [w h u v du dv f k is-tilling] :as gs} t]\n  (let [t (clip 0 1 t)\n        tu (transient u)\n        tv (transient v)\n        w1 (dec w)\n        h1 (dec h)\n\n        temp (reduce (fn [[tu tv] [x y]]\n                       (let [idx (+ x (* y w))\n                             top (- idx w)\n                             bottom (+ idx w)\n                             left (dec idx)\n                             right (inc idx)\n                             f (get-f gs x y)\n                             k (get-k gs x y)\n                             cu (get u idx)\n                             cv (get v idx)\n                             d2 (* cu cv cv)]\n\n                         [(assoc! tu idx (max 0 (+ cu\n                                                   (* t\n                                                      (+ (- (* du (- (+ (get u right) (get u left) (get u bottom) (get u top))\n                                                                     (* 4 cu)))\n                                                            d2)\n                                                         (* f (- 1.0 cu)))))))\n\n\n                          (assoc! tv idx (max 0 (+ cv\n                                                   (* t\n                                                      (- (+ (* dv (- (+ (get v right) (get v left) (get v bottom) (get v top))\n                                                                     (* 4 cv)))\n                                                            d2)\n                                                         (* k cv))))))]))\n                     [(transient u) (transient v)]\n                     (for [x (range 1 w1)\n                           y (range 1 h1)]\n                       [x y]))\n        [tu tv] (if-not is-tilling\n                  temp\n                  (let [w2 (dec w1)\n                        idxH1 (* h1 w)\n                        idxH2 (* (dec h1) w)\n\n                        temp (reduce\n                               (fn [[tu tv] x]\n                                 (println \&quot;here\&quot;)\n                                 (let [left (if (zero? x) w1 (dec x))\n                                       right (if (= w1 x) 0 (inc x))\n                                       idx (+ idxH1 x)\n                                       cu (get u x)\n                                       cv (get v x)\n                                       cui (get u idx)\n                                       cvi (get v idx)\n                                       d1 (* cu cv cv)\n                                       d2 (* cui cvi cvi)]\n\n                                   [(-&gt; tu\n                                        (assoc! x (max 0 (+ cu\n                                                            (* t (+ (- (* du (- (+ (get u right) (get u left) (get u (+ w x)) cui)\n                                                                                (* 4 cu)))\n                                                                       d1)\n                                                                    (* f (- 1.0 cu)))))))\n                                        (assoc! idx (max 0 (+ cui\n                                                              (* t (+ (- (* du (- (+ (get u (+ idxH1 right)) (get u (+ idxH1 left)) cu (get u (+ idxH2 x)))\n                                                                                  (* 4 cui)))\n                                                                         d2)\n                                                                      (* f (- 1.0 cui))))))))\n                                    (-&gt; tv\n                                        (assoc! x (max 0 (+ cv\n                                                            (* t (- (+ (* dv (- (+ (get v right) (get v left) (get v (+ w x)) cvi)\n                                                                                (* 4 cv)))\n                                                                       d1)\n                                                                    (* k cv))))))\n                                        (assoc! idx (max 0 (+ cvi\n                                                              (* t (- (+ (* dv (- (+ (get v (+ idxH1 right)) (get v (+ idxH1 left)) cv (get v (+ idxH2 x)))\n                                                                                  (* 4 cvi)))\n                                                                         d2)\n                                                                      (* k cvi)))))))]))\n                               temp\n                               (range 0 w))]\n                    (reduce\n                      (fn [[tu tv] y]\n                        (println \&quot;there\&quot;)\n                        (let [idx (* y w)\n                              idxW1 (+ idx w1)\n                              idxW2 (+ idx w2)\n                              cu (get u idx)\n                              cv (get v idx)\n                              cui (get u idxW1)\n                              cvi (get v idxW1)\n                              d1 (* cu cv cv)\n                              d2 (* cui cvi cvi)\n                              up (* w (if (zero? y) h1 (dec y)))\n                              down (* w (if (= h1 y) 0 (inc y)))]\n\n                          [(-&gt; tu\n                               (assoc! idx (max 0 (+ cu\n                                                     (* t (+ (- (* du (- (+ (get u (inc idx)) cui (get u down) (get u up))\n                                                                         (* 4 cu)))\n                                                                d1)\n                                                             (* f (- 1.0 cu)))))))\n\n                               (assoc! idxW1 (max 0 (+ cui\n                                                       (* t (+ (- (* du (- (+ cu (get u idxW2) (get u (+ w1 down)) cu (get u (+ up w1)))\n                                                                           (* 4 cui)))\n                                                                  d2)\n                                                               (* f (- 1.0 cui))))))))\n\n                           (-&gt; tv\n                               (assoc! idx (max 0 (+ cv\n                                                     (* t (- (+ (* dv (- (+ (get v (inc idx)) cvi (get v down) (get v up))\n                                                                         (* 4 cv)))\n                                                                d1)\n                                                             (* k cv))))))\n\n                               (assoc! idxW1 (max 0 (+ cvi\n                                                       (* t (- (+ (* dv (- (+ cv (get v idxW2) (get v (+ down w1)) (get v (+ up w1)))\n                                                                           (* 4 cvi)))\n                                                                  d2)\n                                                               (* k cvi)))))))]))\n                      temp\n                      (range 0 h))))]\n    (assoc gs :u (persistent! tu)\n              :v (persistent! tv))))&quot; &quot;(let [w 40\n        h 40\n        pixel-size 5\n        gs (atom (grayscott w h false))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))]\n\n    (animate\n      (fn [_]\n        (swap! gs step)\n        (svg \&quot;#app\&quot;\n             {:width (* w pixel-size) :height (* h pixel-size)}\n             (map-indexed (fn [i v]\n                            (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size {:fill @(cscale v)}))\n                          (:u @gs)))\n        true)))&quot; &quot;(time (do (upd3 (grayscott 200 200 true) 1) nil))&quot; &quot;(defn upd [{:keys [w h u v du dv f k is-tilling] :as gs} t]\n  (let [t (clip 0 1 t)\n        tu (transient u)\n        tv (transient v)\n        w1 (dec w)\n        h1 (dec h)\n\n        temp (reduce (fn [[tu tv] [x y]]\n                       (let [idx (+ x (* y w))\n                             top (- idx w)\n                             bottom (+ idx w)\n                             left (dec idx)\n                             right (inc idx)\n                             ;f (get-f gs x y)\n                             ;k (get-k gs x y)\n                             cu (get u idx)\n                             cv (get v idx)\n                             d2 (* cu cv cv)]\n\n                         [(assoc! tu idx (max 0 (+ cu\n                                                   (* t\n                                                      (+ (- (* du (- (mm/add (get u right) (get u left) (get u bottom) (get u top))\n                                                                     (* 4 cu)))\n                                                            d2)\n                                                         (* f (- 1.0 cu)))))))\n\n\n                          (assoc! tv idx (max 0 (+ cv\n                                                   (* t\n                                                      (- (+ (* dv (- (mm/add (get v right) (get v left) (get v bottom) (get v top))\n                                                                     (* 4 cv)))\n                                                            d2)\n                                                         (* k cv))))))]))\n                     [(transient u) (transient v)]\n                     (for [x (range 1 w1)\n                           y (range 1 h1)]\n                       [x y]))\n        [tu tv] (if-not is-tilling\n                  temp\n                  (let [w2 (dec w1)\n                        idxH1 (* h1 w)\n                        idxH2 (* (dec h1) w)\n\n                        temp (reduce\n                               (fn [[tu tv] x]\n                                 (let [left (if (zero? x) w1 (dec x))\n                                       right (if (= w1 x) 0 (inc x))\n                                       idx (+ idxH1 x)\n                                       cu (get u x)\n                                       cv (get v x)\n                                       cui (get u idx)\n                                       cvi (get v idx)\n                                       d1 (* cu cv cv)\n                                       d2 (* cui cvi cvi)]\n\n                                   [(-&gt; tu\n                                        (assoc! x (max 0 (+ cu\n                                                            (* t (+ (- (* du (- (mm/add (get u right) (get u left) (get u (+ w x)) cui)\n                                                                                (* 4 cu)))\n                                                                       d1)\n                                                                    (* f (- 1.0 cu)))))))\n                                        (assoc! idx (max 0 (+ cui\n                                                              (* t (+ (- (* du (- (mm/add (get u (+ idxH1 right)) (get u (+ idxH1 left)) cu (get u (+ idxH2 x)))\n                                                                                  (* 4 cui)))\n                                                                         d2)\n                                                                      (* f (- 1.0 cui))))))))\n                                    (-&gt; tv\n                                        (assoc! x (max 0 (+ cv\n                                                            (* t (- (+ (* dv (- (mm/add (get v right) (get v left) (get v (+ w x)) cvi)\n                                                                                (* 4 cv)))\n                                                                       d1)\n                                                                    (* k cv))))))\n                                        (assoc! idx (max 0 (+ cvi\n                                                              (* t (- (+ (* dv (- (mm/add (get v (+ idxH1 right)) (get v (+ idxH1 left)) cv (get v (+ idxH2 x)))\n                                                                                  (* 4 cvi)))\n                                                                         d2)\n                                                                      (* k cvi)))))))]))\n                               temp\n                               (range 0 w))]\n                    (reduce\n                      (fn [[tu tv] y]\n                        (let [idx (* y w)\n                              idxW1 (+ idx w1)\n                              idxW2 (+ idx w2)\n                              cu (get u idx)\n                              cv (get v idx)\n                              cui (get u idxW1)\n                              cvi (get v idxW1)\n                              d1 (* cu cv cv)\n                              d2 (* cui cvi cvi)\n                              up (* w (if (zero? y) h1 (dec y)))\n                              down (* w (if (= h1 y) 0 (inc y)))]\n\n                          [(-&gt; tu\n                               (assoc! idx (max 0 (+ cu\n                                                     (* t (+ (- (* du (- (mm/add (get u (inc idx)) cui (get u down) (get u up))\n                                                                         (* 4 cu)))\n                                                                d1)\n                                                             (* f (- 1.0 cu)))))))\n\n                               (assoc! idxW1 (max 0 (+ cui\n                                                       (* t (+ (- (* du (- (mm/add cu (get u idxW2) (get u (+ w1 down)) cu (get u (+ up w1)))\n                                                                           (* 4 cui)))\n                                                                  d2)\n                                                               (* f (- 1.0 cui))))))))\n\n                           (-&gt; tv\n                               (assoc! idx (max 0 (+ cv\n                                                     (* t (- (+ (* dv (- (mm/add (get v (inc idx)) cvi (get v down) (get v up))\n                                                                         (* 4 cv)))\n                                                                d1)\n                                                             (* k cv))))))\n\n                               (assoc! idxW1 (max 0 (+ cvi\n                                                       (* t (- (+ (* dv (- (mm/add cv (get v idxW2) (get v (+ down w1)) (get v (+ up w1)))\n                                                                           (* 4 cvi)))\n                                                                  d2)\n                                                               (* k cvi)))))))]))\n                      temp\n                      (range 0 h))))]\n    (assoc gs :u (persistent! tu)\n              :v (persistent! tv))))&quot; &quot;(merge {:a 1} {:a 2})&quot; &quot;(time (do (upd (grayscott 200 200 true) 1) nil))&quot; &quot;(grayscott 200 200)&quot; &quot;(upd (grayscott 200 200) 1)&quot; &quot;(grayscott 20 20)&quot; &quot;(grayscott 2 2)&quot; &quot;(let [w 40\n        h 40\n        pixel-size 5\n        gs (atom (grayscott w h))\n\n        cscale #(c/blend (css \&quot;white\&quot;) (css \&quot;black\&quot;) %)\n\n        coords #(vector (int (/ % w)) (rem % w))\n\n        step (apply comp (repeat 10 #(upd % 1)))]\n\n    (animate\n      (fn [_]\n        (swap! gs step)\n        (svg \&quot;#app\&quot;\n             {:width (* w pixel-size) :height (* h pixel-size)}\n             (map-indexed (fn [i v]\n                            (svg/rect (map (partial *  pixel-size) (coords i))  pixel-size  pixel-size {:fill @(cscale v)}))\n                          (:u @gs)))\n        true)))&quot; &quot;(ns geom.noise)&quot; &quot;(let [seed1 (rand 1000000)\n      seed2 (rand 1000000)]\n  (apply max (take 1000 (map noise (range seed1 (+ 100 seed1) 0.1) (range seed2 (+ 100 seed2) 2.01)))))&quot; &quot;(let [seed1 (rand 1000000)\n      seed2 (rand 1000000)]\n  (apply min (take 1000 (map noise (range seed1 (+ 100 seed1) 0.1) (range seed2 (+ 100 seed2) 2.01)))))&quot; &quot;(let [seed1 (rand 1000000)\n      seed2 (rand 1000000)]\n  (count (filter (partial &gt;= 1) (take 1000 (map noise (range seed1 (+ 100 seed1) 0.1) (range seed2 (+ 100 seed2) 2.01))))))&quot; &quot;(let [seed1 (rand 1000000)\n      seed2 (rand 1000000)]\n  (count (filter (partial &lt;= 1) (take 1000 (map noise (range seed1 (+ 100 seed1) 0.1) (range seed2 (+ 100 seed2) 2.01))))))&quot; &quot;(let [seed1 (rand 1000000)\n      seed2 (rand 1000000)]\n  (count (take 1000 (map noise (range seed1 (+ 100 seed1) 0.1) (range seed2 (+ 100 seed2) 2.01)))))&quot; &quot;(let [seed1 (rand 1000000)\n      seed2 (rand 1000000)]\n  (count (take 1000 (map noise (range seed1 (+ 1000 seed1) 0.1) (range seed2 (+ 1000 seed2) 2.01)))))&quot; &quot;(let [seed1 (rand 1000000)\n      seed2 (rand 1000000)]\n  (count (filter (partial &gt;= 1) (take 1000 (map noise (range seed1 (+ 1000 seed1) 0.1) (range seed2 (+ 1000 seed2) 2.01))))))&quot; &quot;(aget (a/float32 [1 1 1]) 2)&quot; &quot;(defn upd2 [{:keys [w h u v du dv f k is-tilling] :as gs} t]\n     (let [t (clip 0 1 t)\n           w1 (dec w)\n           h1 (dec h)\n\n           [tu tv] (reduce (fn [[tu tv] [x y]]\n                             (let [idx (+ x (* y w))\n                                   top (- idx w)\n                                   bottom (+ idx w)\n                                   left (dec idx)\n                                   right (inc idx)\n                                   f (get-f gs x y)\n                                   k (get-k gs x y)\n                                   cu (get u idx)\n                                   cv (get v idx)\n                                   d2 (* cu cv cv)]\n\n                               [(aset tu idx (max 0 (+ cu\n                                                         (* t\n                                                            (+ (- (* du (- (mm/add (get u right) (get u left) (get u bottom) (get u top))\n                                                                           (* 4 cu)))\n                                                                  d2)\n                                                               (* f (- 1.0 cu)))))))\n\n\n                                (aset tv idx (max 0 (+ cv\n                                                         (* t\n                                                            (- (+ (* dv (- (mm/add (get v right) (get v left) (get v bottom) (get v top))\n                                                                           (* 4 cv)))\n                                                                  d2)\n                                                               (* k cv))))))]))\n                           [(a/float32 u) (a/float32 v)]\n                           (for [x (range 1 w1)\n                                 y (range 1 h1)]\n                             [x y]))]\n       (assoc gs :u (persistent! tu)\n                 :v (persistent! tv))))&quot; &quot;(defn upd2 [{:keys [w h u v du dv f k is-tilling] :as gs} t]\n     (let [t (clip 0 1 t)\n           w1 (dec w)\n           h1 (dec h)\n\n           [tu tv] (reduce (fn [[tu tv] [x y]]\n                             (let [idx (+ x (* y w))\n                                   top (- idx w)\n                                   bottom (+ idx w)\n                                   left (dec idx)\n                                   right (inc idx)\n                                   f (get-f gs x y)\n                                   k (get-k gs x y)\n                                   cu (get u idx)\n                                   cv (get v idx)\n                                   d2 (* cu cv cv)]\n\n                               [(aset tu idx (max 0 (+ cu\n                                                         (* t\n                                                            (+ (- (* du (- (mm/add (get u right) (get u left) (get u bottom) (get u top))\n                                                                           (* 4 cu)))\n                                                                  d2)\n                                                               (* f (- 1.0 cu)))))))\n\n\n                                (aset tv idx (max 0 (+ cv\n                                                         (* t\n                                                            (- (+ (* dv (- (mm/add (get v right) (get v left) (get v bottom) (get v top))\n                                                                           (* 4 cv)))\n                                                                  d2)\n                                                               (* k cv))))))]))\n                           [(a/float32 u) (a/float32 v)]\n                           (for [x (range 1 w1)\n                                 y (range 1 h1)]\n                             [x y]))]\n       (assoc gs :u tu\n                 :v tv)))&quot; &quot;(time (do (upd (grayscott 200 200) 1) nil))&quot; &quot;(time (do (upd2 (grayscott 200 200) 1) nil))&quot; &quot;(let [pinks (c/grad-palette (c/css \&quot;light-coral\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        f (flower {:origin [250 250]\n                   :lrs    (shapes/flower-lrs [3 10] [5 20] [7 40])})]\n    (svg \&quot;#app\&quot;\n         {:width 500 :height 500 :fill \&quot;rgba(0,0,0,0.1)\&quot;}\n         (map (fn [{:keys [idx points]}] (svg/polygon points {:fill @(nth pinks idx)})) (reverse (:lrs f)))))&quot; &quot;(let [pinks (c/grad-palette (c/css \&quot;light-coral\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        f (flower {:origin [250 250]\n                   :lrs    (shapes/flower-lrs [3 30] [9 60] [15 150] [25 230])})\n        pols (shapes/flower-&gt;voronoi [500 500] f)]\n    (svg \&quot;#app\&quot;\n         {:width 500 :height 500}\n         (map (fn [x] (svg/polygon (:polygon x)\n                                   {:stroke-width 2\n                                    :stroke \&quot;white\&quot;\n                                    :fill @(nth pinks (-&gt; x :seed :lr :idx))}))\n              pols)))&quot; &quot;(let [pinks (c/grad-palette (c/css \&quot;light-coral\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        f (flower {:origin [250 250]\n                   :lrs    (shapes/flower-lrs [3 10 {:speed 0.1}] [5 20 {:speed -0.1}] [7 40 {:speed 0.05}])\n                   :rotating? true})]\n    (animate (fn [_]\n               (svg \&quot;#app\&quot;\n                    {:width 500 :height 500 :fill \&quot;rgba(0,0,0,0.1)\&quot;}\n                    (map (fn [{:keys [idx points]}]\n                           (svg/polygon @points {:fill @(nth pinks idx)}))\n                         (reverse (:lrs f))))\n               true)))&quot; &quot;(let [pinks (c/grad-palette (c/css \&quot;light-coral\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        f (flower {:origin [250 250]\n                   :lrs    (shapes/flower-lrs [3 10] [5 50] [7 120] [13 200] [9 220])\n                   :rotating? true})]\n    (animate (fn [[a b]]\n               (let [pols (shapes/flower-&gt;voronoi [500 500] f)]\n                 (svg \&quot;#app\&quot;\n                      {:width 500 :height 500 }\n                      (map (fn [x] (svg/polygon (:polygon x) {:stroke-width 2\n                                                              :stroke \&quot;white\&quot;\n                                                              :fill @(nth pinks (-&gt; x :seed :lr :idx))})) pols)))\n               true)))&quot; &quot;(let [pinks (c/grad-palette (c/css \&quot;light-coral\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        blues (c/grad-palette (c/css \&quot;light-skyblue\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        greens (c/grad-palette (c/css \&quot;olive\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        oranges (c/grad-palette (c/css \&quot;orange\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        f1 (flower {:id :one\n                    :origin [100 100]\n                   :lrs    (shapes/flower-lrs [3 30] [9 60] [15 150] )})\n        f2 (flower {:id :two\n                    :origin [400 400]\n                    :lrs    (shapes/flower-lrs [5 30] [7 80] [12 120] )})\n        f3 (flower {:id :three\n                    :origin [300 150]\n                    :lrs    (shapes/flower-lrs [5 30] [7 80] [12 120] )})\n        f4 (flower {:id :four\n                    :origin [150 250]\n                    :lrs    (shapes/flower-lrs [5 30] [7 80] [12 120] )})\n        pols (shapes/flowers-&gt;voronoi [500 500] f1 f2 f3 f4)]\n    (svg \&quot;#app\&quot;\n         {:width 500 :height 500}\n         (map (fn [x] (svg/polygon (:polygon x)\n                                   {:stroke-width 2\n                                    :stroke       \&quot;white\&quot;\n                                    :fill         @(nth (condp = (-&gt; x :seed :lr :flower)\n                                                          :one pinks\n                                                          :two blues\n                                                          :three greens\n                                                          :four oranges)\n                                                        (-&gt; x :seed :lr :idx))}))\n              pols)))&quot; &quot;(let [pinks (c/grad-palette (c/css \&quot;light-coral\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        blues (c/grad-palette (c/css \&quot;light-skyblue\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        greens (c/grad-palette (c/css \&quot;olive\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n        oranges (c/grad-palette (c/css \&quot;orange\&quot;) (c/css \&quot;#FAFAFA\&quot;) 5)\n\n        find-color (fn [x]\n                     @(nth (condp = (-&gt; x :seed :lr :flower)\n                             0 pinks\n                             1 blues\n                             2 greens\n                             3 oranges)\n                           (-&gt; x :seed :lr :idx)))\n\n        rf (fn [id origin]\n             (flower {:id id\n                      :origin origin\n                      :lrs    (shapes/flower-lrs\n                                [(randge 2 7)(randge 20 50)]\n                                [(randge 5 10)(randge 30 90)]\n                                [(randge 7 15)(randge 70 130)]\n                                [(randge 10 25)(randge 110 160)])\n                      :rotating? true}))\n\n        f (fn [id origin]\n             (flower {:id id\n                      :origin origin\n                      :lrs    (shapes/flower-lrs [3 10] [5 30] [7 80] [12 120])\n                      :rotating? true}))\n\n        fs (map f (range) [[100 100][300 300][300 100][100 300]])]\n    (animate (fn [[a b]]\n               (let [pols (apply shapes/flowers-&gt;voronoi [500 500] fs)]\n                 (svg \&quot;#app\&quot;\n                      {:width 400 :height 400 }\n                      (map #(svg/polygon (:polygon %) {:fill (find-color %)})\n                           pols)))\n               true)))&quot; &quot;(moving-triangulation\n    {:width  1000\n     :height 500\n     :n      100})&quot; &quot;(rand-voro {:width 1000 :height 500 :n 100})&quot; &quot;(moving-voro {:width 1000 :height 500 :n 100})&quot; &quot;(moving-voro2 {:width 1000 :height 500 :n 100})&quot; &quot;(moving-voro3 {:width 1000 :height 300 :n 130})&quot; &quot;(moving-voro4 {:width 800 :height 200 :n 150})&quot; &quot;(moving-voro5 {:width 600 :height 600 :n 300})&quot; &quot;(moving-voro5 {:width 600 :height 600 :n 100})&quot; &quot;(moving-voro6 {:width 600 :height 200 :n-calm 200 :n-nervous 3})&quot; &quot;(require '[thi.ng.geom.rect :as r])&quot; &quot;(-&gt;&gt; (init-svg! \&quot;#app\&quot; [1000 1000])\n       (dom/clear!)\n       (dom/create-dom!\n         (svg/group {:stroke \&quot;black\&quot; :fill \&quot;white\&quot;}\n                    (map (comp svg/polygon) (g/tessellate (polygon/polygon2 [[0 50] [50 0] [100 50] [75 100] [25 100]])))\n                    (map (comp svg/polygon) (map (comp g/tessellate polygon/polygon2)\n                                                 (g/tessellate (polygon/polygon2 [[100 200] [300 200] [400 500] [0 500]])))))))&quot; &quot;(let [cv (clipped-voronoi (reverse [[0 50] [50 0] [100 50] [75 100] [25 100]]))\n        xs (cv (map vec2 [[25 30] [75 30] [50 75]]))]\n    (-&gt;&gt; (init-svg! \&quot;#app\&quot; [1000 1000])\n         (dom/clear!)\n         #_(dom/create-dom!\n             [:defs [:clipPath {:id \&quot;myClip\&quot;}\n                     [:circle {:cx 50 :cy 50 :r 30}]]])\n\n         (dom/create-dom!\n           (list\n\n             [:defs [:clipPath {:id \&quot;myClip\&quot;} [:circle {:cx 50 :cy 50 :r 10}]]]\n             #_(svg/defs (svg/instance \&quot;clipPath\&quot; {:id \&quot;myClip\&quot;} (svg/circle [50 50] 10)))\n             (svg/group {:stroke \&quot;black\&quot; :fill \&quot;white\&quot; :style \&quot;-webkit-clip-path: polygon(25px 25px, 75px 25px, 75px 75px , 25px 75px)\&quot;}\n                        (map (comp svg/polygon :polygon) xs))))))&quot;], :remote []}}</component>
</project>