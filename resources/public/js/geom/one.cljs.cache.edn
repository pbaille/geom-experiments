;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name geom.one, :imports nil, :requires {dom thi.ng.domus.core, thi.ng.geom.webgl.animator thi.ng.geom.webgl.animator, thi.ng.geom.core thi.ng.geom.core, v thi.ng.geom.core.vector, thi.ng.geom.svg.core thi.ng.geom.svg.core, thi.ng.geom.core.vector thi.ng.geom.core.vector, thi.ng.math.core thi.ng.math.core, m thi.ng.math.core, thi.ng.geom.circle thi.ng.geom.circle, c thi.ng.geom.circle, g thi.ng.geom.core, thi.ng.domus.core thi.ng.domus.core, svg thi.ng.geom.svg.core}, :uses {animate thi.ng.geom.webgl.animator, vec2 thi.ng.geom.core.vector}, :defs {walker {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :line 11, :column 7, :end-line 11, :end-column 13, :arglists (quote ([max-x max-y]))}, :name geom.one/walker, :variadic false, :file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :end-column 13, :method-params ([max-x max-y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([max-x max-y]))}, rand-step {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :line 15, :column 7, :end-line 15, :end-column 16, :arglists (quote ([w]))}, :name geom.one/rand-step, :variadic false, :file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :end-column 16, :method-params ([w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([w]))}, weight-picker {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :line 23, :column 7, :end-line 23, :end-column 20, :arglists (quote ([m])), :doc "takes a map of type object -> prob"}, :name geom.one/weight-picker, :variadic false, :file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "takes a map of type object -> prob"}, prob-step {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :line 37, :column 7, :end-line 37, :end-column 16, :arglists (quote ([w]))}, :name geom.one/prob-step, :variadic false, :file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :end-column 16, :method-params ([w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([w]))}, launch-walker {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :line 43, :column 7, :end-line 43, :end-column 20, :arglists (quote ([]))}, :name geom.one/launch-walker, :variadic false, :file "/Users/pierre/Code/Clojure/geom/resources/public/js/geom/one.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:min :dwn :width :up :stroke-width :max :right :obj :height :left}, :order [:up :dwn :left :right :obj :min :max :width :height :stroke-width]}, :doc nil}