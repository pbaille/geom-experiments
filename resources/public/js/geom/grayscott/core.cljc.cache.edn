;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name geom.grayscott.core, :imports nil, :requires {a thi.ng.typedarrays.core, thi.ng.typedarrays.core thi.ng.typedarrays.core}, :uses nil, :defs {clip {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([min max n]))}, :name geom.grayscott.core/clip, :variadic false, :file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :end-column 11, :method-params ([min max n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([min max n]))}, get-u {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 13, :column 7, :end-line 13, :end-column 12, :arglists (quote ([{w :w, h :h, u :u} x y]))}, :name geom.grayscott.core/get-u, :variadic false, :file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :end-column 12, :method-params ([p__21553 x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{w :w, h :h, u :u} x y]))}, get-v {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([{w :w, h :h, v :v} x y]))}, :name geom.grayscott.core/get-v, :variadic false, :file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :end-column 12, :method-params ([p__21558 x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{w :w, h :h, v :v} x y]))}, get-f {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 23, :column 7, :end-line 23, :end-column 12, :arglists (quote ([gs x y]))}, :name geom.grayscott.core/get-f, :variadic false, :file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :end-column 12, :method-params ([gs x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([gs x y]))}, get-k {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 26, :column 7, :end-line 26, :end-column 12, :arglists (quote ([gs x y]))}, :name geom.grayscott.core/get-k, :variadic false, :file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :end-column 12, :method-params ([gs x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([gs x y]))}, set-coefs {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([gs f k du dv]))}, :name geom.grayscott.core/set-coefs, :variadic false, :file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :end-column 16, :method-params ([gs f k du dv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 5, :fn-var true, :arglists (quote ([gs f k du dv]))}, grayscott-defaults {:name geom.grayscott.core/grayscott-defaults, :file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 32, :column 1, :end-line 32, :end-column 24, :meta {:file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 32, :column 6, :end-line 32, :end-column 24}}, grayscott {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 41, :column 7, :end-line 41, :end-column 16, :arglists (quote ([w h & [opts]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(w h [opts])], :arglists ([w h & [opts]]), :arglists-meta (nil)}}, :name geom.grayscott.core/grayscott, :variadic true, :file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(w h [opts])], :arglists ([w h & [opts]]), :arglists-meta (nil)}, :method-params [(w h [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists ([w h & [opts]])}, upd {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :line 47, :column 7, :end-line 47, :end-column 10, :arglists (quote ([{:keys [w h u v du dv f k is-tilling], :as gs} t]))}, :name geom.grayscott.core/upd, :variadic false, :file "/Users/pierre/Code/Clojure/generative-design/geom/src/geom/grayscott/core.cljc", :end-column 10, :method-params ([p__21571 t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [w h u v du dv f k is-tilling], :as gs} t]))}}, :require-macros {mm thi.ng.math.macros, thi.ng.math.macros thi.ng.math.macros}, :cljs.analyzer/constants {:seen #{:v :get-k :else :get-f :w :k :du :h :dv :f :is-tilling :u}, :order [:else :w :h :u :v :get-f :get-k :f :k :du :dv :is-tilling]}, :doc nil}