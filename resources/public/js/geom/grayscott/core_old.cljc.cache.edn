;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name geom.grayscott.core-old, :imports nil, :requires nil, :uses nil, :defs {get-v {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 16, :column 7, :end-line 16, :end-column 12, :arglists (quote ([{w :w, h :h, v :v} x y]))}, :name geom.grayscott.core-old/get-v, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 12, :method-params ([p__20489 x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{w :w, h :h, v :v} x y]))}, map->Grayscott {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 31, :column 12, :end-line 31, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__20496]))}, :name geom.grayscott.core-old/map->Grayscott, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 21, :method-params ([G__20496]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20496]))}, ->Grayscott {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 31, :column 12, :end-line 31, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([w h u v f k du dv is-tilling]))}, :name geom.grayscott.core-old/->Grayscott, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 21, :method-params ([w h u v f k du dv is-tilling]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 31, :end-line 31, :max-fixed-arity 9, :fn-var true, :arglists (quote ([w h u v f k du dv is-tilling]))}, get-u {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 11, :column 7, :end-line 11, :end-column 12, :arglists (quote ([{w :w, h :h, u :u} x y]))}, :name geom.grayscott.core-old/get-u, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 12, :method-params ([p__20484 x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{w :w, h :h, u :u} x y]))}, clip {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 5, :column 7, :end-line 5, :end-column 11, :arglists (quote ([min max n]))}, :name geom.grayscott.core-old/clip, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 11, :method-params ([min max n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 3, :fn-var true, :arglists (quote ([min max n]))}, Grayscott {:num-fields 9, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection geom.grayscott.core-old/IGrayscott cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name geom.grayscott.core-old/Grayscott, :file "src/geom/grayscott/core_old.cljc", :end-column 21, :type true, :column 12, :internal-ctor true, :line 31, :record true, :end-line 31, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, get-k {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 29, :column 4, :end-line 29, :end-column 9, :protocol geom.grayscott.core-old/IGrayscott, :doc "get k coef at given coordinates", :arglists (quote ([_ x y]))}, :protocol geom.grayscott.core-old/IGrayscott, :name geom.grayscott.core-old/get-k, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 9, :method-params ([_ x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 29, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ x y])), :doc "get k coef at given coordinates"}, get-f {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 28, :column 4, :end-line 28, :end-column 9, :protocol geom.grayscott.core-old/IGrayscott, :doc "get f coef at given coordinates", :arglists (quote ([_ x y]))}, :protocol geom.grayscott.core-old/IGrayscott, :name geom.grayscott.core-old/get-f, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 9, :method-params ([_ x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 28, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ x y])), :doc "get f coef at given coordinates"}, IGrayscott {:meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 27, :column 14, :end-line 27, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {get-f [[_ x y]], get-k [[_ x y]]}}}, :protocol-symbol true, :name geom.grayscott.core-old/IGrayscott, :file "src/geom/grayscott/core_old.cljc", :end-column 24, :column 1, :line 27, :protocol-info {:methods {get-f [[_ x y]], get-k [[_ x y]]}}, :info nil, :end-line 27, :impls #{geom.grayscott.core-old/Grayscott}, :doc nil, :jsdoc ("@interface")}, set-coefs {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 21, :column 7, :end-line 21, :end-column 16, :arglists (quote ([gs f k du dv]))}, :name geom.grayscott.core-old/set-coefs, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 16, :method-params ([gs f k du dv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 5, :fn-var true, :arglists (quote ([gs f k du dv]))}, grayscott {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([w h wrap]))}, :name geom.grayscott.core-old/grayscott, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 16, :method-params ([w h wrap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists (quote ([w h wrap]))}, upd* {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 149, :column 7, :end-line 149, :end-column 11, :arglists (quote ([{:keys [w h u v du dv], :as gs} t])), :doc "light version without tilling support"}, :name geom.grayscott.core-old/upd*, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 11, :method-params ([p__20735 t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [w h u v du dv], :as gs} t])), :doc "light version without tilling support"}, default-coefs {:name geom.grayscott.core-old/default-coefs, :file "src/geom/grayscott/core_old.cljc", :line 24, :column 1, :end-line 24, :end-column 19, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 24, :column 6, :end-line 24, :end-column 19}}, upd {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/grayscott/core_old.cljc", :line 44, :column 7, :end-line 44, :end-column 10, :arglists (quote ([{:keys [w h u v du dv f k is-tilling], :as gs} t]))}, :name geom.grayscott.core-old/upd, :variadic false, :file "src/geom/grayscott/core_old.cljc", :end-column 10, :method-params ([p__20502 t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [w h u v du dv f k is-tilling], :as gs} t]))}}, :require-macros {mm thi.ng.math.macros, thi.ng.math.macros thi.ng.math.macros}, :cljs.analyzer/constants {:seen #{:v is-tilling u :else :w v :k w :du :h k :dv du :f h dv :is-tilling :u f}, :order [:else :w :h :u :v :f :k :du :dv :is-tilling w h u v f k du dv is-tilling]}, :doc nil}