;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name geom.utils.prob, :imports nil, :requires {simplex thi.ng.math.simplexnoise, thi.ng.math.simplexnoise thi.ng.math.simplexnoise, m thi.ng.math.core, thi.ng.math.core thi.ng.math.core}, :uses nil, :defs {weight-picker {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :line 5, :column 7, :end-line 5, :end-column 20, :arglists (quote ([m])), :doc "takes a map of type object -> prob"}, :name geom.utils.prob/weight-picker, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "takes a map of type object -> prob"}, noise1 {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :line 19, :column 7, :end-line 19, :end-column 13, :arglists (quote ([x]))}, :name geom.utils.prob/noise1, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, noise-seq {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :line 22, :column 7, :end-line 22, :end-column 16, :arglists (quote ([output-range increment & [seed]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(output-range increment [seed])], :arglists ([output-range increment & [seed]]), :arglists-meta (nil)}}, :name geom.utils.prob/noise-seq, :variadic true, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(output-range increment [seed])], :arglists ([output-range increment & [seed]]), :arglists-meta (nil)}, :method-params [(output-range increment [seed])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists ([output-range increment & [seed]])}, randge {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :line 28, :column 7, :end-line 28, :end-column 13, :arglists (quote ([a b]))}, :name geom.utils.prob/randge, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :end-column 13, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, realize {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :line 34, :column 7, :end-line 34, :end-column 14, :arglists (quote ([x]))}, :name geom.utils.prob/realize, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/prob.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:min :max :obj}, :order [:obj :min :max]}, :doc nil}