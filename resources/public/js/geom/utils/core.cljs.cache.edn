;; Analyzed by ClojureScript 1.7.228
{:use-macros {sel1 dommy.core, html hiccups.core}, :excludes #{}, :name geom.utils.core, :imports nil, :requires {hipo.core hipo.core, dom thi.ng.domus.core, hiccups.runtime hiccups.runtime, hipo hipo.core, thi.ng.math.simplexnoise thi.ng.math.simplexnoise, thi.ng.geom.svg.core thi.ng.geom.svg.core, thi.ng.math.core thi.ng.math.core, m thi.ng.math.core, simplex thi.ng.math.simplexnoise, dommy.core dommy.core, thi.ng.domus.core thi.ng.domus.core, svg thi.ng.geom.svg.core, hiccupsrt hiccups.runtime, d dommy.core}, :uses nil, :defs {weight-picker {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/core.cljs", :line 14, :column 7, :end-line 14, :end-column 20, :arglists (quote ([m])), :doc "takes a map of type object -> prob"}, :name geom.utils.core/weight-picker, :variadic false, :file "src/geom/utils/core.cljs", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "takes a map of type object -> prob"}, noise1 {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/core.cljs", :line 28, :column 7, :end-line 28, :end-column 13, :arglists (quote ([x]))}, :name geom.utils.core/noise1, :variadic false, :file "src/geom/utils/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, noise-seq {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/core.cljs", :line 31, :column 7, :end-line 31, :end-column 16, :arglists (quote ([output-range increment & [seed]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(output-range increment [seed])], :arglists ([output-range increment & [seed]]), :arglists-meta (nil)}}, :name geom.utils.core/noise-seq, :variadic true, :file "src/geom/utils/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(output-range increment [seed])], :arglists ([output-range increment & [seed]]), :arglists-meta (nil)}, :method-params [(output-range increment [seed])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists ([output-range increment & [seed]])}, init-svg! {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/core.cljs", :line 39, :column 7, :end-line 39, :end-column 16, :arglists (quote ([root [width height]]))}, :name geom.utils.core/init-svg!, :variadic false, :file "src/geom/utils/core.cljs", :end-column 16, :method-params ([root p__24222]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([root [width height]]))}, svg {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/core.cljs", :line 46, :column 7, :end-line 46, :end-column 10, :arglists (quote ([parent-selector attrs & childs])), :doc "in order to avoid clip-path wrong rendering", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(parent-selector attrs childs)], :arglists ([parent-selector attrs & childs]), :arglists-meta (nil)}}, :name geom.utils.core/svg, :variadic true, :file "src/geom/utils/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(parent-selector attrs childs)], :arglists ([parent-selector attrs & childs]), :arglists-meta (nil)}, :method-params [(parent-selector attrs childs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists ([parent-selector attrs & childs]), :doc "in order to avoid clip-path wrong rendering"}}, :require-macros {hiccups hiccups.core, hiccups.core hiccups.core, hipo hipo.core, hipo.core hipo.core, d dommy.core, dommy.core dommy.core}, :cljs.analyzer/constants {:seen #{:min :width :max :id :class :obj :height}, :order [:obj :min :max :width :height :id :class]}, :doc nil}