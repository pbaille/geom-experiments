;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name geom.utils.shapes, :imports nil, :requires {p geom.utils.prob, thi.ng.geom.webgl.animator thi.ng.geom.webgl.animator, thi.ng.geom.core thi.ng.geom.core, v thi.ng.geom.core.vector, thi.ng.geom.core.vector thi.ng.geom.core.vector, thi.ng.math.core thi.ng.math.core, fd3 geom.utils.from-d3, m thi.ng.math.core, geom.utils.prob geom.utils.prob, geom.utils.from-d3 geom.utils.from-d3, g thi.ng.geom.core}, :uses {realize geom.utils.prob, animate thi.ng.geom.webgl.animator, vec2 thi.ng.geom.core.vector}, :defs {rotate-point {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 18, :column 7, :end-line 18, :end-column 19, :arglists (quote ([[ox oy] [tx ty :as t] angle]))}, :name geom.utils.shapes/rotate-point, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 19, :method-params ([p__28469 p__28470 angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[ox oy] [tx ty :as t] angle]))}, flower-lr {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 51, :column 7, :end-line 51, :end-column 16, :arglists (quote ([petals radius & [others]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(petals radius [others])], :arglists ([petals radius & [others]]), :arglists-meta (nil)}}, :name geom.utils.shapes/flower-lr, :variadic true, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(petals radius [others])], :arglists ([petals radius & [others]]), :arglists-meta (nil)}, :method-params [(petals radius [others])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists ([petals radius & [others]])}, rotating-flower {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 34, :column 8, :end-line 34, :end-column 23, :private true, :arglists (quote ([f]))}, :private true, :name geom.utils.shapes/rotating-flower, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 23, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, regular-polygon {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 9, :column 7, :end-line 9, :end-column 22, :arglists (quote ([[x y] n & [sizes]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [([x y] n [sizes])], :arglists ([[x y] n & [sizes]]), :arglists-meta (nil)}}, :name geom.utils.shapes/regular-polygon, :variadic true, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [([x y] n [sizes])], :arglists ([[x y] n & [sizes]]), :arglists-meta (nil)}, :method-params [([x y] n [sizes])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists ([[x y] n & [sizes]])}, flower-lrs {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 56, :column 7, :end-line 56, :end-column 17, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name geom.utils.shapes/flower-lrs, :variadic true, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, flower-lr-gen {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 60, :column 7, :end-line 60, :end-column 20, :arglists (quote ([]))}, :name geom.utils.shapes/flower-lr-gen, :variadic false, :file "src/geom/utils/shapes.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, flowers->voronoi {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 77, :column 7, :end-line 77, :end-column 23, :arglists (quote ([vor-args & fs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(vor-args fs)], :arglists ([vor-args & fs]), :arglists-meta (nil)}}, :name geom.utils.shapes/flowers->voronoi, :variadic true, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(vor-args fs)], :arglists ([vor-args & fs]), :arglists-meta (nil)}, :method-params [(vor-args fs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists ([vor-args & fs])}, flower {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 40, :column 7, :end-line 40, :end-column 13, :arglists (quote ([{:keys [origin lrs rotating?], :as flower, :or {origin (vec2 0 0)}}]))}, :name geom.utils.shapes/flower, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 13, :method-params ([p__28483]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [origin lrs rotating?], :as flower, :or {origin (vec2 0 0)}}]))}, rotating-points {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 24, :column 7, :end-line 24, :end-column 22, :arglists (quote ([o dθ points]))}, :name geom.utils.shapes/rotating-points, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 22, :method-params ([o dθ points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists (quote ([o dθ points]))}, ensure-derefed {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 67, :column 7, :end-line 67, :end-column 21, :arglists (quote ([x]))}, :name geom.utils.shapes/ensure-derefed, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, flower->voronoi {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :line 69, :column 7, :end-line 69, :end-column 22, :arglists (quote ([vor-args f]))}, :name geom.utils.shapes/flower->voronoi, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/utils/shapes.cljs", :end-column 22, :method-params ([vor-args f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vor-args f]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :lr :else :speed :flower :petals :points :radius :id :rotating? :origin :x :idx :lrs}, :order [:else :x :y :lrs :points :speed :origin :rotating? :idx :radius :petals :lr :flower :id]}, :doc nil}