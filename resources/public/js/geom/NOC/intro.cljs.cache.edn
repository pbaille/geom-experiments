;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name geom.NOC.intro, :imports nil, :requires {dom thi.ng.domus.core, u geom.NOC.utils, thi.ng.geom.webgl.animator thi.ng.geom.webgl.animator, thi.ng.geom.core thi.ng.geom.core, v thi.ng.geom.core.vector, thi.ng.math.simplexnoise thi.ng.math.simplexnoise, thi.ng.geom.svg.core thi.ng.geom.svg.core, thi.ng.geom.core.vector thi.ng.geom.core.vector, thi.ng.math.core thi.ng.math.core, m thi.ng.math.core, geom.NOC.utils geom.NOC.utils, thi.ng.geom.circle thi.ng.geom.circle, c thi.ng.geom.circle, g thi.ng.geom.core, thi.ng.domus.core thi.ng.domus.core, svg thi.ng.geom.svg.core}, :uses {animate thi.ng.geom.webgl.animator, vec2 thi.ng.geom.core.vector, noise2 thi.ng.math.simplexnoise, noise1 thi.ng.math.simplexnoise}, :defs {walker {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/intro.cljs", :line 13, :column 7, :end-line 13, :end-column 13, :arglists (quote ([max-x max-y]))}, :name geom.NOC.intro/walker, :variadic false, :file "src/geom/NOC/intro.cljs", :end-column 13, :method-params ([max-x max-y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([max-x max-y]))}, rand-step {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/intro.cljs", :line 17, :column 7, :end-line 17, :end-column 16, :arglists (quote ([w]))}, :name geom.NOC.intro/rand-step, :variadic false, :file "src/geom/NOC/intro.cljs", :end-column 16, :method-params ([w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([w]))}, rand-walker {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/intro.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([]))}, :name geom.NOC.intro/rand-walker, :variadic false, :file "src/geom/NOC/intro.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, noise-viz1 {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/intro.cljs", :line 47, :column 7, :end-line 47, :end-column 17, :arglists (quote ([ninc]))}, :name geom.NOC.intro/noise-viz1, :variadic false, :file "src/geom/NOC/intro.cljs", :end-column 17, :method-params ([ninc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ninc]))}, noise-walker {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/intro.cljs", :line 67, :column 7, :end-line 67, :end-column 19, :arglists (quote ([i1 i2]))}, :name geom.NOC.intro/noise-walker, :variadic false, :file "src/geom/NOC/intro.cljs", :end-column 19, :method-params ([i1 i2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([i1 i2]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:dwn :width :up :stroke-width :right :height :left}, :order [:up :dwn :left :right :width :height :stroke-width]}, :doc nil}