;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name geom.NOC.utils, :imports nil, :requires {m thi.ng.math.core, thi.ng.math.core thi.ng.math.core, thi.ng.math.simplexnoise thi.ng.math.simplexnoise, dom thi.ng.domus.core, thi.ng.domus.core thi.ng.domus.core, svg thi.ng.geom.svg.core, thi.ng.geom.svg.core thi.ng.geom.svg.core}, :uses {noise2 thi.ng.math.simplexnoise, noise1 thi.ng.math.simplexnoise}, :defs {weight-picker {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/utils.cljs", :line 7, :column 7, :end-line 7, :end-column 20, :arglists (quote ([m])), :doc "takes a map of type object -> prob"}, :name geom.NOC.utils/weight-picker, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/utils.cljs", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "takes a map of type object -> prob"}, noise-seq {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/utils.cljs", :line 21, :column 7, :end-line 21, :end-column 16, :arglists (quote ([range i]))}, :name geom.NOC.utils/noise-seq, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/utils.cljs", :end-column 16, :method-params ([range i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([range i]))}, init-svg! {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/utils.cljs", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([root [width height]]))}, :name geom.NOC.utils/init-svg!, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/NOC/utils.cljs", :end-column 16, :method-params ([root p__30172]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([root [width height]]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:min :width :max :obj :height}, :order [:obj :min :max :width :height]}, :doc nil}