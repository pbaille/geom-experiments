;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name geom.misc.strands, :imports nil, :requires {mat thi.ng.geom.core.matrix, phys thi.ng.geom.physics.core, dom thi.ng.domus.core, thi.ng.geom.webgl.animator thi.ng.geom.webgl.animator, thi.ng.geom.core thi.ng.geom.core, accel thi.ng.geom.spatialtree, v thi.ng.geom.core.vector, thi.ng.geom.svg.core thi.ng.geom.svg.core, thi.ng.geom.core.vector thi.ng.geom.core.vector, thi.ng.geom.circle thi.ng.geom.circle, thi.ng.geom.physics.core thi.ng.geom.physics.core, c thi.ng.geom.circle, g thi.ng.geom.core, thi.ng.geom.spatialtree thi.ng.geom.spatialtree, thi.ng.domus.core thi.ng.domus.core, thi.ng.geom.core.matrix thi.ng.geom.core.matrix, svg thi.ng.geom.svg.core}, :uses {M32 thi.ng.geom.core.matrix, M44 thi.ng.geom.core.matrix, vec3 thi.ng.geom.core.vector, animate thi.ng.geom.webgl.animator, vec2 thi.ng.geom.core.vector}, :defs {attract! {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :line 13, :column 7, :end-line 13, :end-column 15, :arglists (quote ([p q rsq strength delta])), :doc "Takes a 2d or 3d attractor position, a particle and attractor\n  params (squared radius, strength, time delta). If particle is within\n  attraction radius, applies proportional strength force to particle.\n  If strength is negative, particle will be repelled."}, :name geom.misc.strands/attract!, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :end-column 15, :method-params ([p q rsq strength delta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p q rsq strength delta])), :doc "Takes a 2d or 3d attractor position, a particle and attractor\n  params (squared radius, strength, time delta). If particle is within\n  attraction radius, applies proportional strength force to particle.\n  If strength is negative, particle will be repelled."}, accelerated-force-field {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :line 26, :column 7, :end-line 26, :end-column 30, :arglists (quote ([accel r strength])), :doc "Takes a mutable quadtree or octree, an attraction radius and strength.\n  Returns a function which will be applied as behavior to all\n  particles to create a force field around each. The spatial tree is\n  used to limit k-neighbor lookups to only particles within the given\n  radius around each particle."}, :name geom.misc.strands/accelerated-force-field, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :end-column 30, :method-params ([accel r strength]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([accel r strength])), :doc "Takes a mutable quadtree or octree, an attraction radius and strength.\n  Returns a function which will be applied as behavior to all\n  particles to create a force field around each. The spatial tree is\n  used to limit k-neighbor lookups to only particles within the given\n  radius around each particle."}, update-accelerator {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :line 41, :column 7, :end-line 41, :end-column 25, :arglists (quote ([accel])), :doc "Takes a mutable quadtree or octree and returns a function to be\n  used as simulation listener. When called, updates the tree to\n  reflect current positions of all particles in the physics sim."}, :name geom.misc.strands/update-accelerator, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :end-column 25, :method-params ([accel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([accel])), :doc "Takes a mutable quadtree or octree and returns a function to be\n  used as simulation listener. When called, updates the tree to\n  reflect current positions of all particles in the physics sim."}, make-strand {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :line 52, :column 7, :end-line 52, :end-column 18, :arglists (quote ([n fold offset])), :doc "Creates a strand of spring-connected 2d particles in a zigzag order\n  along the Y axis. The first arg defines the total number of\n  particles in the strand, the second how many particles per row. The\n  last arg defines the 2d start position. Returns 2-elem vector\n  of [particles springs]."}, :name geom.misc.strands/make-strand, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :end-column 18, :method-params ([n fold offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n fold offset])), :doc "Creates a strand of spring-connected 2d particles in a zigzag order\n  along the Y axis. The first arg defines the total number of\n  particles in the strand, the second how many particles per row. The\n  last arg defines the 2d start position. Returns 2-elem vector\n  of [particles springs]."}, init-physics {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :line 69, :column 7, :end-line 69, :end-column 19, :arglists (quote ([state n])), :doc "Takes a state map and integer defining number of particles per\n  strand. First creates two strands, each with its own circular\n  constraint. Then defines full VerletPhysics setup with gravity and\n  force field behaviors. Also attaches a simulation listener to keep\n  particle quadtree in sync. Returns updated state map w/ physics\n  related data injected."}, :name geom.misc.strands/init-physics, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :end-column 19, :method-params ([state n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state n])), :doc "Takes a state map and integer defining number of particles per\n  strand. First creates two strands, each with its own circular\n  constraint. Then defines full VerletPhysics setup with gravity and\n  force field behaviors. Also attaches a simulation listener to keep\n  particle quadtree in sync. Returns updated state map w/ physics\n  related data injected."}, particle-positions {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :line 93, :column 7, :end-line 93, :end-column 25, :arglists (quote ([particles])), :doc "Takes a seq of particles, returns vector of their positions."}, :name geom.misc.strands/particle-positions, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :end-column 25, :method-params ([particles]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([particles])), :doc "Takes a seq of particles, returns vector of their positions."}, svg-strand {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :line 98, :column 7, :end-line 98, :end-column 17, :arglists (quote ([particles stroke fill])), :doc "Takes a seq of particles and stroke/fill colors, returns a SVG\n  group defining particles as circles and a polyline between\n  particles."}, :name geom.misc.strands/svg-strand, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :end-column 17, :method-params ([particles stroke fill]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 3, :fn-var true, :arglists (quote ([particles stroke fill])), :doc "Takes a seq of particles and stroke/fill colors, returns a SVG\n  group defining particles as circles and a polyline between\n  particles."}, visualize-svg {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :line 111, :column 7, :end-line 111, :end-column 20, :arglists (quote ([{:keys [physics root svg-attrs], :as state}])), :doc "Takes a state map and visualizes the current state of the physic\n  sim as SVG DOM element."}, :name geom.misc.strands/visualize-svg, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :end-column 20, :method-params ([p__22200]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [physics root svg-attrs], :as state}])), :doc "Takes a state map and visualizes the current state of the physic\n  sim as SVG DOM element."}, -main {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :line 126, :column 7, :end-line 126, :end-column 12, :arglists (quote ([]))}, :name geom.misc.strands/-main, :variadic false, :file "/Users/pierre/Code/Clojure/geom/src/geom/misc/strands.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:stroke :transform :fill :width :svg-attrs :behaviors :physics :gravity :g :c :stroke-width :root :f :clusters :iter :particles :listeners :springs :height}, :order [:particles :c :physics :springs :behaviors :listeners :g :f :gravity :iter :clusters :stroke :fill :root :svg-attrs :width :height :transform :stroke-width]}, :doc nil}