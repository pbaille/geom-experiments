;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name thi.ng.geom.spatialtree, :imports nil, :requires {thi.ng.geom.core.utils thi.ng.geom.core.utils, a thi.ng.geom.aabb, thi.ng.geom.types.utils thi.ng.geom.types.utils, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.core.utils, r thi.ng.geom.rect, v thi.ng.geom.core.vector, thi.ng.geom.core.vector thi.ng.geom.core.vector, isec thi.ng.geom.core.intersect, thi.ng.math.core thi.ng.math.core, thi.ng.geom.types thi.ng.geom.types, thi.ng.geom.rect thi.ng.geom.rect, g thi.ng.geom.core, tu thi.ng.geom.types.utils, thi.ng.geom.aabb thi.ng.geom.aabb, thi.ng.geom.core.intersect thi.ng.geom.core.intersect}, :uses {vec3 thi.ng.geom.core.vector, vec2 thi.ng.geom.core.vector, *eps* thi.ng.math.core, delta= thi.ng.math.core}, :defs {quadtree {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 304, :column 7, :end-line 304, :end-column 15, :arglists (quote ([{[x y] :p, [w h] :size}] [[x y] size] [x y size] [x y w h])), :doc "Create a new quadtree root node with the given XY position & dimensions.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{[x y] :p, [w h] :size}] [[x y] size] [x y size] [x y w h]), :arglists ([{[x y] :p, [w h] :size}] [[x y] size] [x y size] [x y w h]), :arglists-meta (nil nil nil nil)}}, :name thi.ng.geom.spatialtree/quadtree, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{[x y] :p, [w h] :size}] [[x y] size] [x y size] [x y w h]), :arglists ([{[x y] :p, [w h] :size}] [[x y] size] [x y size] [x y w h]), :arglists-meta (nil nil nil nil)}, :method-params ([{[x y] :p, [w h] :size}] [[x y] size] [x y size] [x y w h]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 4, :fn-var true, :arglists ([{[x y] :p, [w h] :size}] [[x y] size] [x y size] [x y w h]), :doc "Create a new quadtree root node with the given XY position & dimensions."}, set-child {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 18, :column 4, :end-line 18, :end-column 13, :protocol thi.ng.geom.spatialtree/PTreeOps, :doc nil, :arglists (quote ([_ i c]))}, :protocol thi.ng.geom.spatialtree/PTreeOps, :name thi.ng.geom.spatialtree/set-child, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 13, :method-params ([_ i c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ i c])), :doc nil}, octree {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 315, :column 7, :end-line 315, :end-column 13, :arglists (quote ([{[x y z] :p, [w h d] :size}] [[x y z] size] [x y z size] [x y z w h d])), :doc "Create a new octree root node with the given XYZ position & dimensions.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([{[x y z] :p, [w h d] :size}] [[x y z] size] [x y z size] [x y z w h d]), :arglists ([{[x y z] :p, [w h d] :size}] [[x y z] size] [x y z size] [x y z w h d]), :arglists-meta (nil nil nil nil)}}, :name thi.ng.geom.spatialtree/octree, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([{[x y z] :p, [w h d] :size}] [[x y z] size] [x y z size] [x y z w h d]), :arglists ([{[x y z] :p, [w h d] :size}] [[x y z] size] [x y z size] [x y z w h d]), :arglists-meta (nil nil nil nil)}, :method-params ([{[x y z] :p, [w h d] :size}] [[x y z] size] [x y z size] [x y z w h d]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 6, :fn-var true, :arglists ([{[x y z] :p, [w h d] :size}] [[x y z] size] [x y z size] [x y z w h d]), :doc "Create a new octree root node with the given XYZ position & dimensions."}, set-children {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 19, :column 4, :end-line 19, :end-column 16, :protocol thi.ng.geom.spatialtree/PTreeOps, :doc nil, :arglists (quote ([_ c]))}, :protocol thi.ng.geom.spatialtree/PTreeOps, :name thi.ng.geom.spatialtree/set-children, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 16, :method-params ([_ c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ c])), :doc nil}, delete-point* {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 47, :column 7, :end-line 47, :end-column 20, :arglists (quote ([root p])), :doc "Removes point from tree (if found) and prunes any resulting empty nodes.\n  Returns given node (root)."}, :name thi.ng.geom.spatialtree/delete-point*, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 20, :method-params ([root p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([root p])), :doc "Removes point from tree (if found) and prunes any resulting empty nodes.\n  Returns given node (root)."}, path-for-point {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 25, :column 7, :end-line 25, :end-column 21, :arglists (quote ([root p])), :doc "Returns depth-first seq of nodes for given point."}, :name thi.ng.geom.spatialtree/path-for-point, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 21, :method-params ([root p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([root p])), :doc "Returns depth-first seq of nodes for given point."}, select-with-shape {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 98, :column 7, :end-line 98, :end-column 24, :arglists (quote ([q s]))}, :name thi.ng.geom.spatialtree/select-with-shape, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 24, :method-params ([q s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([q s]))}, lazy-select-with* {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 118, :column 8, :end-line 118, :end-column 25, :private true, :arglists (quote ([isec? inside? queue]))}, :private true, :name thi.ng.geom.spatialtree/lazy-select-with*, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 25, :method-params ([isec? inside? queue]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 3, :fn-var true, :arglists (quote ([isec? inside? queue]))}, points-in-circle? {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 106, :column 7, :end-line 106, :end-column 24, :arglists (quote ([q c r]))}, :name thi.ng.geom.spatialtree/points-in-circle?, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 24, :method-params ([q c r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 3, :fn-var true, :arglists (quote ([q c r]))}, lazy-select-with-shape {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 137, :column 7, :end-line 137, :end-column 29, :arglists (quote ([q s]))}, :name thi.ng.geom.spatialtree/lazy-select-with-shape, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 29, :method-params ([q s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([q s]))}, PTreeOps {:meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 14, :column 14, :end-line 14, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {child-index-for-point [[_ p]], child-for-point [[_ p]], get-children [[_]], set-child [[_ i c]], set-children [[_ c]], set-point [[_ p d]], make-child-for-point [[_ p d add-point?]], split-node [[_]]}}}, :protocol-symbol true, :name thi.ng.geom.spatialtree/PTreeOps, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 22, :column 1, :line 14, :protocol-info {:methods {child-index-for-point [[_ p]], child-for-point [[_ p]], get-children [[_]], set-child [[_ i c]], set-children [[_ c]], set-point [[_ p d]], make-child-for-point [[_ p d add-point?]], split-node [[_]]}}, :info nil, :end-line 14, :impls #{thi.ng.geom.spatialtree/MutableQuadtreeNode thi.ng.geom.spatialtree/MutableOctreeNode}, :doc nil, :jsdoc ("@interface")}, MutableOctreeNode {:num-fields 10, :protocols #{thi.ng.geom.core/PSpatialTree thi.ng.geom.core/PBounds thi.ng.geom.core/PClear thi.ng.geom.spatialtree/Object thi.ng.geom.spatialtree/PTreeOps}, :name thi.ng.geom.spatialtree/MutableOctreeNode, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 27, :type true, :column 10, :line 217, :record false, :end-line 217, :skip-protocol-flag nil}, ->MutableOctreeNode {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 217, :column 10, :end-line 217, :end-column 27, :protocols #{thi.ng.geom.core/PSpatialTree thi.ng.geom.core/PBounds thi.ng.geom.core/PClear thi.ng.geom.spatialtree/Object thi.ng.geom.spatialtree/PTreeOps}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([x y z w h d children point data bounds]))}, :protocols #{thi.ng.geom.core/PSpatialTree thi.ng.geom.core/PBounds thi.ng.geom.core/PClear thi.ng.geom.spatialtree/Object thi.ng.geom.spatialtree/PTreeOps}, :name thi.ng.geom.spatialtree/->MutableOctreeNode, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 27, :method-params ([x y z w h d children point data bounds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 217, :end-line 217, :max-fixed-arity 10, :fn-var true, :arglists (quote ([x y z w h d children point data bounds])), :skip-protocol-flag nil}, select-with-sphere {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 115, :column 7, :end-line 115, :end-column 25, :arglists (quote ([q c r]))}, :name thi.ng.geom.spatialtree/select-with-sphere, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 25, :method-params ([q c r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 3, :fn-var true, :arglists (quote ([q c r]))}, select-with {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 78, :column 7, :end-line 78, :end-column 18, :arglists (quote ([q isec? inside?] [q isec? inside? acc])), :doc "Produces a vector of points in the tree within a given region.\n  Uses two predicate fns to logically define the query region:\n\n  `isec?`  : single-arg fn to check if the bounds of a tree node\n  intersect the query region\n  `inside?`: single-arg fn to check if a point lies within the region.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([q isec? inside?] [q isec? inside? acc]), :arglists ([q isec? inside?] [q isec? inside? acc]), :arglists-meta (nil nil)}}, :name thi.ng.geom.spatialtree/select-with, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([q isec? inside?] [q isec? inside? acc]), :arglists ([q isec? inside?] [q isec? inside? acc]), :arglists-meta (nil nil)}, :method-params ([q isec? inside?] [q isec? inside? acc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 4, :fn-var true, :arglists ([q isec? inside?] [q isec? inside? acc]), :doc "Produces a vector of points in the tree within a given region.\n  Uses two predicate fns to logically define the query region:\n\n  `isec?`  : single-arg fn to check if the bounds of a tree node\n  intersect the query region\n  `inside?`: single-arg fn to check if a point lies within the region."}, make-child-for-point {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 21, :column 4, :end-line 21, :end-column 24, :protocol thi.ng.geom.spatialtree/PTreeOps, :doc nil, :arglists (quote ([_ p d add-point?]))}, :protocol thi.ng.geom.spatialtree/PTreeOps, :name thi.ng.geom.spatialtree/make-child-for-point, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 24, :method-params ([_ p d add-point?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 21, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ p d add-point?])), :doc nil}, lazy-select-with {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 132, :column 7, :end-line 132, :end-column 23, :arglists (quote ([q isec? inside?])), :doc "Same as `select-with`, only produces a lazy sequence of points."}, :name thi.ng.geom.spatialtree/lazy-select-with, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 23, :method-params ([q isec? inside?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 3, :fn-var true, :arglists (quote ([q isec? inside?])), :doc "Same as `select-with`, only produces a lazy sequence of points."}, get-children {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 17, :column 4, :end-line 17, :end-column 16, :protocol thi.ng.geom.spatialtree/PTreeOps, :doc nil, :arglists (quote ([_]))}, :protocol thi.ng.geom.spatialtree/PTreeOps, :name thi.ng.geom.spatialtree/get-children, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 16, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, child-index-for-point {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 15, :column 4, :end-line 15, :end-column 25, :protocol thi.ng.geom.spatialtree/PTreeOps, :doc nil, :arglists (quote ([_ p]))}, :protocol thi.ng.geom.spatialtree/PTreeOps, :name thi.ng.geom.spatialtree/child-index-for-point, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 25, :method-params ([_ p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ p])), :doc nil}, split-node {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 22, :column 4, :end-line 22, :end-column 14, :protocol thi.ng.geom.spatialtree/PTreeOps, :doc nil, :arglists (quote ([_]))}, :protocol thi.ng.geom.spatialtree/PTreeOps, :name thi.ng.geom.spatialtree/split-node, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 14, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, check-with {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 63, :column 7, :end-line 63, :end-column 17, :arglists (quote ([q isec? inside?]))}, :name thi.ng.geom.spatialtree/check-with, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 17, :method-params ([q isec? inside?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([q isec? inside?]))}, set-point {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 20, :column 4, :end-line 20, :end-column 13, :protocol thi.ng.geom.spatialtree/PTreeOps, :doc nil, :arglists (quote ([_ p d]))}, :protocol thi.ng.geom.spatialtree/PTreeOps, :name thi.ng.geom.spatialtree/set-point, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 13, :method-params ([_ p d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ p d])), :doc nil}, child-for-point {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 16, :column 4, :end-line 16, :end-column 19, :protocol thi.ng.geom.spatialtree/PTreeOps, :doc nil, :arglists (quote ([_ p]))}, :protocol thi.ng.geom.spatialtree/PTreeOps, :name thi.ng.geom.spatialtree/child-for-point, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 19, :method-params ([_ p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ p])), :doc nil}, do-with-radius {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 101, :column 8, :end-line 101, :end-column 22, :private true, :arglists (quote ([f f2 q c r]))}, :private true, :name thi.ng.geom.spatialtree/do-with-radius, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 22, :method-params ([f f2 q c r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 5, :fn-var true, :arglists (quote ([f f2 q c r]))}, add-point* {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 32, :column 7, :end-line 32, :end-column 17, :arglists (quote ([root p d])), :doc "Associates point with data in tree, recursively creates all required intermediate nodes."}, :name thi.ng.geom.spatialtree/add-point*, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 17, :method-params ([root p d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists (quote ([root p d])), :doc "Associates point with data in tree, recursively creates all required intermediate nodes."}, select-with-circle {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 112, :column 7, :end-line 112, :end-column 25, :arglists (quote ([q c r]))}, :name thi.ng.geom.spatialtree/select-with-circle, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 25, :method-params ([q c r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 3, :fn-var true, :arglists (quote ([q c r]))}, ->MutableQuadtreeNode {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 140, :column 10, :end-line 140, :end-column 29, :protocols #{thi.ng.geom.core/PSpatialTree thi.ng.geom.core/PBounds thi.ng.geom.core/PClear thi.ng.geom.spatialtree/Object thi.ng.geom.spatialtree/PTreeOps}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([x y w h children point data bounds]))}, :protocols #{thi.ng.geom.core/PSpatialTree thi.ng.geom.core/PBounds thi.ng.geom.core/PClear thi.ng.geom.spatialtree/Object thi.ng.geom.spatialtree/PTreeOps}, :name thi.ng.geom.spatialtree/->MutableQuadtreeNode, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 29, :method-params ([x y w h children point data bounds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 140, :end-line 140, :max-fixed-arity 8, :fn-var true, :arglists (quote ([x y w h children point data bounds])), :skip-protocol-flag nil}, points-in-sphere? {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/spatialtree.cljc", :line 109, :column 7, :end-line 109, :end-column 24, :arglists (quote ([q c r]))}, :name thi.ng.geom.spatialtree/points-in-sphere?, :variadic false, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 24, :method-params ([q c r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 3, :fn-var true, :arglists (quote ([q c r]))}, MutableQuadtreeNode {:num-fields 8, :protocols #{thi.ng.geom.core/PSpatialTree thi.ng.geom.core/PBounds thi.ng.geom.core/PClear thi.ng.geom.spatialtree/Object thi.ng.geom.spatialtree/PTreeOps}, :name thi.ng.geom.spatialtree/MutableQuadtreeNode, :file "resources/public/js/thi/ng/geom/spatialtree.cljc", :end-column 29, :type true, :column 10, :line 140, :record false, :end-line 140, :skip-protocol-flag nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{x data y children :size w bounds z :mutable h :p d point}, :order [:p :size x y w h children :mutable point data bounds z d]}, :doc nil}