;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name thi.ng.geom.types.utils, :imports nil, :requires {g thi.ng.geom.core, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.core.utils, thi.ng.geom.core.utils thi.ng.geom.core.utils, v thi.ng.geom.core.vector, thi.ng.geom.core.vector thi.ng.geom.core.vector, thi.ng.geom.types thi.ng.geom.types, r clojure.core.reducers, clojure.core.reducers clojure.core.reducers}, :uses {vec3 thi.ng.geom.core.vector, vec2 thi.ng.geom.core.vector}, :defs {bounding-rect {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils.cljc", :line 9, :column 7, :end-line 9, :end-column 20, :arglists (quote ([points]))}, :name thi.ng.geom.types.utils/bounding-rect, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils.cljc", :end-column 20, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, bounding-box {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils.cljc", :line 14, :column 7, :end-line 14, :end-column 19, :arglists (quote ([points]))}, :name thi.ng.geom.types.utils/bounding-box, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils.cljc", :end-column 19, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, bounding-circle {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils.cljc", :line 19, :column 7, :end-line 19, :end-column 22, :arglists (quote ([points] [c r-or-points])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([points] [c r-or-points]), :arglists ([points] [c r-or-points]), :arglists-meta (nil nil)}}, :name thi.ng.geom.types.utils/bounding-circle, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([points] [c r-or-points]), :arglists ([points] [c r-or-points]), :arglists-meta (nil nil)}, :method-params ([points] [c r-or-points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists ([points] [c r-or-points])}, bounding-sphere {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils.cljc", :line 26, :column 7, :end-line 26, :end-column 22, :arglists (quote ([points] [c r-or-points])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([points] [c r-or-points]), :arglists ([points] [c r-or-points]), :arglists-meta (nil nil)}}, :name thi.ng.geom.types.utils/bounding-sphere, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([points] [c r-or-points]), :arglists ([points] [c r-or-points]), :arglists-meta (nil nil)}, :method-params ([points] [c r-or-points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists ([points] [c r-or-points])}, coll-bounds {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils.cljc", :line 33, :column 7, :end-line 33, :end-column 18, :arglists (quote ([coll])), :doc "Takes a seq of shape entities, calls g/bounds on each and returns\n  union bounds. Does not support collections of mixed 2d/3d entities."}, :name thi.ng.geom.types.utils/coll-bounds, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils.cljc", :end-column 18, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Takes a seq of shape entities, calls g/bounds on each and returns\n  union bounds. Does not support collections of mixed 2d/3d entities."}, fit-all-into-bounds {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils.cljc", :line 39, :column 7, :end-line 39, :end-column 26, :arglists (quote ([bounds coll])), :doc "Takes an AABB or rect and seq of shapes, proportionally scales and\n  repositions all items to fit into given bounds. Returns lazyseq of\n  transformed entities. Does not support collections of mixed 2D/3D\n  entities. Use rects as target bounds for 2D colls."}, :name thi.ng.geom.types.utils/fit-all-into-bounds, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils.cljc", :end-column 26, :method-params ([bounds coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([bounds coll])), :doc "Takes an AABB or rect and seq of shapes, proportionally scales and\n  repositions all items to fit into given bounds. Returns lazyseq of\n  transformed entities. Does not support collections of mixed 2D/3D\n  entities. Use rects as target bounds for 2D colls."}, into-mesh {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils.cljc", :line 54, :column 7, :end-line 54, :end-column 16, :arglists (quote ([mesh add-face mesh-or-faces]))}, :name thi.ng.geom.types.utils/into-mesh, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils.cljc", :end-column 16, :method-params ([mesh add-face mesh-or-faces]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mesh add-face mesh-or-faces]))}, map-mesh {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils.cljc", :line 63, :column 7, :end-line 63, :end-column 15, :arglists (quote ([f mesh])), :doc "Applies f to all faces of given mesh and adds resulting faces to\n  new mesh. Thus f should return a seq of faces. Returns new mesh."}, :name thi.ng.geom.types.utils/map-mesh, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils.cljc", :end-column 15, :method-params ([f mesh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f mesh])), :doc "Applies f to all faces of given mesh and adds resulting faces to\n  new mesh. Thus f should return a seq of faces. Returns new mesh."}, transform-mesh {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils.cljc", :line 68, :column 7, :end-line 68, :end-column 21, :arglists (quote ([mesh add-face tx]))}, :name thi.ng.geom.types.utils/transform-mesh, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils.cljc", :end-column 21, :method-params ([mesh add-face tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mesh add-face tx]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:size}, :order [:size]}, :doc nil}