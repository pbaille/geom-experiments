;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name thi.ng.geom.types.utils.ptf, :imports nil, :requires {bm thi.ng.geom.basicmesh, thi.ng.geom.core thi.ng.geom.core, thi.ng.geom.core.vector thi.ng.geom.core.vector, thi.ng.math.core thi.ng.math.core, thi.ng.geom.basicmesh thi.ng.geom.basicmesh, m thi.ng.math.core, thi.ng.dstruct.core thi.ng.dstruct.core, g thi.ng.geom.core, thi.ng.geom.core.matrix thi.ng.geom.core.matrix, d thi.ng.dstruct.core}, :uses {TWO_PI thi.ng.math.core, M44 thi.ng.geom.core.matrix, vec3 thi.ng.geom.core.vector, V3 thi.ng.geom.core.vector, vec2 thi.ng.geom.core.vector, *eps* thi.ng.math.core, matrix44 thi.ng.geom.core.matrix}, :defs {sweep-strands {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 110, :column 7, :end-line 110, :end-column 20, :arglists (quote ([base r strands twists profile]))}, :name thi.ng.geom.types.utils.ptf/sweep-strands, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 20, :method-params ([base r strands twists profile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 5, :fn-var true, :arglists (quote ([base r strands twists profile]))}, sweep-mesh {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 93, :column 7, :end-line 93, :end-column 17, :arglists (quote ([points profile & [{:keys [mesh align?]}]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(points profile [{:keys [mesh align?]}])], :arglists ([points profile & [{:keys [mesh align?]}]]), :arglists-meta (nil)}}, :name thi.ng.geom.types.utils.ptf/sweep-mesh, :variadic true, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(points profile [{:keys [mesh align?]}])], :arglists ([points profile & [{:keys [mesh align?]}]]), :arglists-meta (nil)}, :method-params [(points profile [{:keys [mesh align?]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists ([points profile & [{:keys [mesh align?]}]])}, align-frames {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 48, :column 7, :end-line 48, :end-column 19, :arglists (quote ([[points tangents norms bnorms]]))}, :name thi.ng.geom.types.utils.ptf/align-frames, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 19, :method-params ([p__21387]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[points tangents norms bnorms]]))}, sweep-strand {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 101, :column 7, :end-line 101, :end-column 19, :arglists (quote ([[p _ n b] r theta delta profile]))}, :name thi.ng.geom.types.utils.ptf/sweep-strand, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 19, :method-params ([p__21419 r theta delta profile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 5, :fn-var true, :arglists (quote ([[p _ n b] r theta delta profile]))}, compute-first-frame {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 29, :column 7, :end-line 29, :end-column 26, :arglists (quote ([t]))}, :name thi.ng.geom.types.utils.ptf/compute-first-frame, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 26, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, sweep-strand-mesh {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 117, :column 7, :end-line 117, :end-column 24, :arglists (quote ([base r strands twists profile & [{:as opts}]])), :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(base r strands twists profile [{:as opts}])], :arglists ([base r strands twists profile & [{:as opts}]]), :arglists-meta (nil)}}, :name thi.ng.geom.types.utils.ptf/sweep-strand-mesh, :variadic true, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(base r strands twists profile [{:as opts}])], :arglists ([base r strands twists profile & [{:as opts}]]), :arglists-meta (nil)}, :method-params [(base r strands twists profile [{:as opts}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 5, :fn-var true, :arglists ([base r strands twists profile & [{:as opts}]])}, compute-frames {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 37, :column 7, :end-line 37, :end-column 21, :arglists (quote ([points]))}, :name thi.ng.geom.types.utils.ptf/compute-frames, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 21, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, sweep-profile {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 74, :column 7, :end-line 74, :end-column 20, :arglists (quote ([profile [points _ norms bnorms]]))}, :name thi.ng.geom.types.utils.ptf/sweep-profile, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 20, :method-params ([profile p__21397]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([profile [points _ norms bnorms]]))}, compute-frame {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 17, :column 7, :end-line 17, :end-column 20, :arglists (quote ([tangents norms bnorms i]))}, :name thi.ng.geom.types.utils.ptf/compute-frame, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 20, :method-params ([tangents norms bnorms i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tangents norms bnorms i]))}, compute-tangents {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 12, :column 7, :end-line 12, :end-column 23, :arglists (quote ([points]))}, :name thi.ng.geom.types.utils.ptf/compute-tangents, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 23, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, sweep-point {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :line 65, :column 7, :end-line 65, :end-column 18, :arglists (quote ([p n b [qx qy]])), :doc "Takes a path point, a PTF normal & binormal and a profile point.\n  Returns profile point projected on path (point)."}, :name thi.ng.geom.types.utils.ptf/sweep-point, :variadic false, :file "resources/public/js/thi/ng/geom/types/utils/ptf.cljc", :end-column 18, :method-params ([p n b p__21393]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p n b [qx qy]])), :doc "Takes a path point, a PTF normal & binormal and a profile point.\n  Returns profile point projected on path (point)."}}, :require-macros {mm thi.ng.math.macros, thi.ng.math.macros thi.ng.math.macros}, :cljs.analyzer/constants {:seen #{:align? :mesh}, :order [:mesh :align?]}, :doc nil}