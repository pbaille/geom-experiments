;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name thi.ng.geom.polygon, :imports nil, :requires {thi.ng.geom.core.utils thi.ng.geom.core.utils, t thi.ng.geom.triangle, thi.ng.geom.line thi.ng.geom.line, bm thi.ng.geom.basicmesh, thi.ng.geom.types.utils thi.ng.geom.types.utils, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.core.utils, v thi.ng.geom.core.vector, thi.ng.geom.triangle thi.ng.geom.triangle, thi.ng.geom.core.vector thi.ng.geom.core.vector, isec thi.ng.geom.core.intersect, thi.ng.math.core thi.ng.math.core, thi.ng.geom.basicmesh thi.ng.geom.basicmesh, m thi.ng.math.core, thi.ng.dstruct.core thi.ng.dstruct.core, thi.ng.geom.types thi.ng.geom.types, types thi.ng.geom.types, l thi.ng.geom.line, g thi.ng.geom.core, tu thi.ng.geom.types.utils, thi.ng.geom.core.intersect thi.ng.geom.core.intersect, d thi.ng.dstruct.core}, :uses {THREE_HALVES_PI thi.ng.math.core, vec3 thi.ng.geom.core.vector, PI thi.ng.math.core, HALF_PI thi.ng.math.core, vec2 thi.ng.geom.core.vector, *eps* thi.ng.math.core}, :defs {smooth {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 129, :column 7, :end-line 129, :end-column 13, :arglists (quote ([{points :points, :as _} amp base-weight]))}, :name thi.ng.geom.polygon/smooth, :variadic false, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 13, :method-params ([p__24859 amp base-weight]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{points :points, :as _} amp base-weight]))}, h-segment {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 54, :column 8, :end-line 54, :end-column 17, :private true, :arglists (quote ([verts [px py :as p] pred theta ps]))}, :private true, :name thi.ng.geom.polygon/h-segment, :variadic false, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 17, :method-params ([verts p__24812 pred theta ps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 5, :fn-var true, :arglists (quote ([verts [px py :as p] pred theta ps]))}, snip {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 76, :column 8, :end-line 76, :end-column 12, :private true, :arglists (quote ([points a b c nv verts]))}, :private true, :name thi.ng.geom.polygon/snip, :variadic false, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 12, :method-params ([points a b c nv verts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 6, :fn-var true, :arglists (quote ([points a b c nv verts]))}, convex-hull* {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 67, :column 7, :end-line 67, :end-column 19, :arglists (quote ([points]))}, :name thi.ng.geom.polygon/convex-hull*, :variadic false, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 19, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, tessellate* {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 84, :column 7, :end-line 84, :end-column 18, :arglists (quote ([p]))}, :name thi.ng.geom.polygon/tessellate*, :variadic false, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 18, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, clip-convex* {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 29, :column 7, :end-line 29, :end-column 19, :arglists (quote ([verts bounds]))}, :name thi.ng.geom.polygon/clip-convex*, :variadic false, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 19, :method-params ([verts bounds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([verts bounds]))}, inset-polygon {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 121, :column 7, :end-line 121, :end-column 20, :arglists (quote ([points d])), :doc "For CW polygons, use positive distance to inset or negative to outset.\n  For CCW polygons, use opposite."}, :name thi.ng.geom.polygon/inset-polygon, :variadic false, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 20, :method-params ([points d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([points d])), :doc "For CW polygons, use positive distance to inset or negative to outset.\n  For CCW polygons, use opposite."}, polygon2 {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 18, :column 7, :end-line 18, :end-column 15, :arglists (quote ([points] [p & more])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([points]), :arglists ([points] [p & more]), :arglists-meta (nil nil)}}, :name thi.ng.geom.polygon/polygon2, :variadic true, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([points]), :arglists ([points] [p & more]), :arglists-meta (nil nil)}, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists ([points] [p & more])}, inset-corner {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 107, :column 8, :end-line 107, :end-column 20, :private true, :arglists (quote ([prev curr next d]))}, :private true, :name thi.ng.geom.polygon/inset-corner, :variadic false, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 20, :method-params ([prev curr next d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 4, :fn-var true, :arglists (quote ([prev curr next d]))}, cog {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/polygon.cljc", :line 22, :column 7, :end-line 22, :end-column 10, :arglists (quote ([radius teeth profile]))}, :name thi.ng.geom.polygon/cog, :variadic false, :file "resources/public/js/thi/ng/geom/polygon.cljc", :end-column 10, :method-params ([radius teeth profile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([radius teeth profile]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:inset :bottom? :offset :scale :wall :top? :points :nump :mesh :depth :p}, :order [:p :points :mesh :depth :offset :scale :top? :bottom? :inset :wall :nump]}, :doc nil}