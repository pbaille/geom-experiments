;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name thi.ng.geom.basicmesh, :imports nil, :requires {thi.ng.geom.core.utils thi.ng.geom.core.utils, thi.ng.geom.types.utils thi.ng.geom.types.utils, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.core.utils, r clojure.core.reducers, clojure.core.reducers clojure.core.reducers, v thi.ng.geom.core.vector, thi.ng.xerror.core thi.ng.xerror.core, thi.ng.geom.core.vector thi.ng.geom.core.vector, thi.ng.math.core thi.ng.math.core, m thi.ng.math.core, thi.ng.dstruct.core thi.ng.dstruct.core, thi.ng.geom.types thi.ng.geom.types, err thi.ng.xerror.core, types thi.ng.geom.types, g thi.ng.geom.core, tu thi.ng.geom.types.utils, thi.ng.geom.core.matrix thi.ng.geom.core.matrix, d thi.ng.dstruct.core}, :uses {M44 thi.ng.geom.core.matrix, vec3 thi.ng.geom.core.vector, vec2 thi.ng.geom.core.vector, *eps* thi.ng.math.core}, :defs {basic-mesh {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/basicmesh.cljc", :line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([])), :doc "Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices."}, :name thi.ng.geom.basicmesh/basic-mesh, :variadic false, :file "resources/public/js/thi/ng/geom/basicmesh.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices."}, add-face {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/geom/resources/public/js/thi/ng/geom/basicmesh.cljc", :line 16, :column 7, :end-line 16, :end-column 15, :arglists (quote ([mesh f]))}, :name thi.ng.geom.basicmesh/add-face, :variadic false, :file "resources/public/js/thi/ng/geom/basicmesh.cljc", :end-column 15, :method-params ([mesh f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mesh f]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:vertices :fn :attribs :mesh :faces :fnormals}, :order [:vertices :faces :fnormals :attribs :fn :mesh]}, :doc nil}